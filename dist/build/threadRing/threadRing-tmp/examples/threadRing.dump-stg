
==================== STG syntax: ====================
2018-07-30 11:23:40.013879 UTC

Main.main3 :: GHC.Types.Int
[GblId, Str=b] =
    \u srt:SRT:[r2Q :-> GHC.Err.errorWithoutStackTrace,
                rKZX :-> Text.Read.readEither4] []
        GHC.Err.errorWithoutStackTrace Text.Read.readEither4;
Main.main2 :: GHC.Types.Int
[GblId, Str=b] =
    \u srt:SRT:[r2Q :-> GHC.Err.errorWithoutStackTrace,
                rKZY :-> Text.Read.readEither2] []
        GHC.Err.errorWithoutStackTrace Text.Read.readEither2;
Main.$fe_threadring3 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "put"#;
Main.$wthread [InlPrag=[0]]
  :: GHC.MVar.MVar GHC.Types.Int
     -> GHC.MVar.MVar GHC.Types.Int
     -> GHC.MVar.MVar GHC.Types.Int
     -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO ())
           -> GHC.Types.IO () #)
[GblId, Arity=3, Str=<L,U(U)><L,1*U(U)><L,U(U)>, Unf=OtherCon []] =
    \r srt:SRT:[rY :-> GHC.IO.Handle.FD.stdout,
                rZ :-> GHC.IO.Handle.Text.hPutStr2,
                rKEF :-> Main.$fe_threadring3] [w_sQ5B w1_sQ5C w2_sQ5D]
        let {
          w3_sQ5E [Occ=OnceL!, Dmd=<L,U(C(U))>]
            :: Control.Concurrent.Fiber.Fiber GHC.Types.Int
          [LclId, Str=] =
              \u srt:SRT:[] []
                  case w1_sQ5C of _ [Occ=Dead] {
                    GHC.MVar.MVar ww1_sQ5G [Occ=Once] ->
                        case
                            Control.Concurrent.Fiber.MVar.$wtakeMVar ww1_sQ5G
                        of
                        _ [Occ=Dead]
                        { Unit# ww3_sQ5I [Occ=Once] ->
                              Control.Concurrent.Fiber.Fiber [ww3_sQ5I];
                        };
                  }; } in
        let {
          go_sQ5J [Occ=OnceL] :: Control.Concurrent.Fiber.Fiber ()
          [LclId, Str=m, Unf=OtherCon []] =
              NO_CCS Control.Concurrent.Fiber.Fiber! [a2_sQ5K];
          a2_sQ5K [Occ=LoopBreaker]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO ())
               -> GHC.Types.IO ()
          [LclId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
              \r srt:SRT:[rY :-> GHC.IO.Handle.FD.stdout,
                          rZ :-> GHC.IO.Handle.Text.hPutStr2,
                          rKEF :-> Main.$fe_threadring3] [c_sQ5L]
                  case w3_sQ5E of _ [Occ=Dead] {
                    Control.Concurrent.Fiber.Fiber ds_sQ5N [Occ=Once!] ->
                        let {
                          sat_sQ6I [Occ=Once]
                            :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO GHC.Types.Int
                          [LclId, Str=] =
                              \r srt:SRT:[rY :-> GHC.IO.Handle.FD.stdout,
                                          rZ :-> GHC.IO.Handle.Text.hPutStr2,
                                          rKEF :-> Main.$fe_threadring3] [x_sQ5O]
                                  case x_sQ5O of wild1_sQ5P {
                                    GHC.Types.I# x1_sQ5Q ->
                                        case w2_sQ5D of _ [Occ=Dead] {
                                          GHC.MVar.MVar ww1_sQ5S [Occ=Once] ->
                                              case -# [x1_sQ5Q 1] of sat_sQ5T {
                                                __DEFAULT ->
                                                    let {
                                                      sat_sQ5U [Occ=Once] :: GHC.Types.Int
                                                      [LclId, Str=] =
                                                          NO_CCS GHC.Types.I#! [sat_sQ5T];
                                                    } in 
                                                      case
                                                          Control.Concurrent.Fiber.MVar.$wputMVar
                                                              ww1_sQ5S sat_sQ5U
                                                      of
                                                      _ [Occ=Dead]
                                                      { Unit# ww3_sQ5W [Occ=Once!] ->
                                                            let {
                                                              k_sQ5X [Occ=OnceL!,
                                                                      Dmd=<L,U(C(C(U)))>]
                                                                :: Control.Concurrent.Fiber.Fiber ()
                                                              [LclId, Str=] =
                                                                  \u srt:SRT:[] []
                                                                      case
                                                                          <# [x1_sQ5Q 1]
                                                                      of
                                                                      _ [Occ=Dead]
                                                                      { __DEFAULT -> go_sQ5J;
                                                                        1 ->
                                                                            case
                                                                                w_sQ5B
                                                                            of
                                                                            _ [Occ=Dead]
                                                                            { GHC.MVar.MVar ww5_sQ60 [Occ=Once] ->
                                                                                  case
                                                                                      Control.Concurrent.Fiber.MVar.$wputMVar
                                                                                          ww5_sQ60
                                                                                          wild1_sQ5P
                                                                                  of
                                                                                  _ [Occ=Dead]
                                                                                  { Unit# ww7_sQ62 [Occ=Once] ->
                                                                                        Control.Concurrent.Fiber.Fiber [ww7_sQ62];
                                                                                  };
                                                                            };
                                                                      }; } in
                                                            let {
                                                              lvl_sQ63 [Occ=OnceL]
                                                                :: GHC.Base.String
                                                              [LclId, Str=] =
                                                                  \u srt:SRT:[] []
                                                                      case
                                                                          GHC.Show.$wshowSignedInt
                                                                              0 x1_sQ5Q GHC.Types.[]
                                                                      of
                                                                      _ [Occ=Dead]
                                                                      { (#,#) ww5_sQ65 [Occ=Once]
                                                                              ww6_sQ66 [Occ=Once] ->
                                                                            : [ww5_sQ65 ww6_sQ66];
                                                                      };
                                                            } in 
                                                              let {
                                                                sat_sQ6H [Occ=Once]
                                                                  :: Control.Concurrent.Fiber.Dyn
                                                                     -> GHC.Types.IO ()
                                                                [LclId, Str=] =
                                                                    \r srt:SRT:[rY :-> GHC.IO.Handle.FD.stdout,
                                                                                rZ :-> GHC.IO.Handle.Text.hPutStr2,
                                                                                rKEF :-> Main.$fe_threadring3] [x2_sQ67
                                                                                                                eta_sQ68]
                                                                        case
                                                                            GHC.IO.Handle.Text.hPutStr2
                                                                                GHC.IO.Handle.FD.stdout
                                                                                Main.$fe_threadring3
                                                                                GHC.Types.False
                                                                                eta_sQ68
                                                                        of
                                                                        _ [Occ=Dead]
                                                                        { (#,#) ipv_sQ6A [Occ=Once]
                                                                                _ [Occ=Dead] ->
                                                                              case
                                                                                  GHC.IO.Handle.Text.hPutStr2
                                                                                      GHC.IO.Handle.FD.stdout
                                                                                      lvl_sQ63
                                                                                      GHC.Types.True
                                                                                      ipv_sQ6A
                                                                              of
                                                                              _ [Occ=Dead]
                                                                              { (#,#) ipv2_sQ6D [Occ=Once]
                                                                                      _ [Occ=Dead] ->
                                                                                    case
                                                                                        k_sQ5X
                                                                                    of
                                                                                    _ [Occ=Dead]
                                                                                    { Control.Concurrent.Fiber.Fiber ds3_sQ6G [Occ=Once!] ->
                                                                                          ds3_sQ6G
                                                                                              c_sQ5L
                                                                                              ipv2_sQ6D;
                                                                                    };
                                                                              };
                                                                        };
                                                              } in  ww3_sQ5W sat_sQ6H;
                                                      };
                                              };
                                        };
                                  };
                        } in  ds_sQ5N sat_sQ6I;
                  };
        } in  Unit# [a2_sQ5K];
Main.$fe_threadring_$sa1 [Occ=LoopBreaker]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.MVar.MVar GHC.Types.Int
     -> [GHC.MVar.MVar GHC.Types.Int]
     -> [GHC.Types.Int]
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.MVar.MVar GHC.Types.Int, [GHC.MVar.MVar GHC.Types.Int]) #)
[GblId, Arity=4, Str=<S,U><L,U(U)><L,U><S,1*U>, Unf=OtherCon []] =
    \r srt:SRT:[rKEJ :-> Main.$wthread,
                rKEL :-> Main.$fe_threadring_$sa1] [sc_sQ6J
                                                    sc1_sQ6K
                                                    sc2_sQ6L
                                                    sc3_sQ6M]
        case sc3_sQ6M of _ [Occ=Dead] {
          [] ->
              let {
                sat_sQ6O [Occ=Once]
                  :: (GHC.MVar.MVar GHC.Types.Int, [GHC.MVar.MVar GHC.Types.Int])
                [LclId, Str=] =
                    NO_CCS (,)! [sc1_sQ6K sc2_sQ6L];
              } in  (#,#) [sc_sQ6J sat_sQ6O];
          : _ [Occ=Dead] ys_sQ6Q [Occ=Once] ->
              case newMVar# [sc_sQ6J] of _ [Occ=Dead] {
                (#,#) ipv_sQ6S [Occ=Once] ipv1_sQ6T ->
                    case newMVar# [ipv_sQ6S] of _ [Occ=Dead] {
                      (#,#) ipv2_sQ6V [Occ=Once] ipv3_sQ6W ->
                          let {
                            r_sQ6X :: GHC.MVar.MVar GHC.Types.Int
                            [LclId, Str=, Unf=OtherCon []] =
                                NO_CCS GHC.MVar.MVar! [ipv1_sQ6T]; } in
                          let {
                            ret_sQ6Y :: GHC.MVar.MVar GHC.Types.Int
                            [LclId, Str=, Unf=OtherCon []] =
                                NO_CCS GHC.MVar.MVar! [ipv3_sQ6W];
                          } in 
                            let {
                              sat_sQ77 [Occ=Once] :: GHC.Types.IO ()
                              [LclId, Str=] =
                                  \r srt:SRT:[rKEJ :-> Main.$wthread] [s_sQ6Z]
                                      let {
                                        sat_sQ73 [Occ=Once] :: GHC.Prim.Any
                                        [LclId, Str=] =
                                            \u srt:SRT:[rKEJ :-> Main.$wthread] []
                                                case
                                                    Main.$wthread ret_sQ6Y sc1_sQ6K r_sQ6X
                                                of
                                                _ [Occ=Dead]
                                                { Unit# ww1_sQ72 [Occ=Once!] ->
                                                      ww1_sQ72
                                                          Control.Concurrent.Fiber.unFiber1 s_sQ6Z;
                                                };
                                      } in 
                                        case
                                            __primcall  eta.runtime.stg.Stg.trampoline [sat_sQ73]
                                        of
                                        _ [Occ=Dead]
                                        { Unit# ipv4_sQ75 ->
                                              case
                                                  freshStateToken# [ipv4_sQ75]
                                              of
                                              wild1_sQ76 [OS=OneShot]
                                              { __DEFAULT -> (#,#) [wild1_sQ76 ipv4_sQ75];
                                              };
                                        };
                            } in 
                              case fork# [sat_sQ77 ipv2_sQ6V] of _ [Occ=Dead] {
                                (#,#) ipv4_sQ79 [Occ=Once] _ [Occ=Dead] ->
                                    let {
                                      sat_sQ7B [Occ=Once] :: [GHC.MVar.MVar GHC.Types.Int]
                                      [LclId, Str=] =
                                          NO_CCS :! [ret_sQ6Y sc2_sQ6L];
                                    } in 
                                      Main.$fe_threadring_$sa1 ipv4_sQ79 r_sQ6X sat_sQ7B ys_sQ6Q;
                              };
                    };
              };
        };
Main.$fe_threadring2 [Occ=LoopBreaker]
  :: [GHC.MVar.MVar GHC.Types.Int]
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [ds_sQ7C eta_sQ7D]
        case ds_sQ7C of _ [Occ=Dead] {
          [] -> (#,#) [eta_sQ7D GHC.Types.[]];
          : y_sQ7F [Occ=Once!] ys_sQ7G [Occ=Once] ->
              case y_sQ7F of _ [Occ=Dead] {
                GHC.MVar.MVar mvar#_sQ7I [Occ=Once] ->
                    case takeMVar# [mvar#_sQ7I eta_sQ7D] of _ [Occ=Dead] {
                      (#,#) ipv_sQ7K [Occ=Once] ipv1_sQ7L [Occ=Once] ->
                          case Main.$fe_threadring2 ys_sQ7G ipv_sQ7K of _ [Occ=Dead] {
                            (#,#) ipv2_sQ7N [Occ=Once] ipv3_sQ7O [Occ=Once] ->
                                let {
                                  sat_sQ7P [Occ=Once] :: [GHC.Types.Int]
                                  [LclId, Str=] =
                                      NO_CCS :! [ipv1_sQ7L ipv3_sQ7O];
                                } in  (#,#) [ipv2_sQ7N sat_sQ7P];
                          };
                    };
              };
        };
Main.$fe_threadring_$sa [Occ=LoopBreaker]
  :: GHC.Prim.Object# Java.Array.JIntArray
     -> [GHC.Types.Int]
     -> GHC.Prim.Int#
     -> (# GHC.Prim.Object# Java.Array.JIntArray, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [sc_sQ7Q sc1_sQ7R sc2_sQ7S]
        case sc1_sQ7R of _ [Occ=Dead] {
          [] -> (#,#) [sc_sQ7Q GHC.Tuple.()];
          : ipv_sQ7U [Occ=Once!] ipv1_sQ7V [Occ=Once] ->
              case ipv_sQ7U of _ [Occ=Dead] {
                GHC.Types.I# e#_sQ7X [Occ=Once] ->
                    case
                        writeJIntArray# [sc_sQ7Q sc2_sQ7S e#_sQ7X GHC.Prim.realWorld#]
                    of
                    _ [Occ=Dead, OS=OneShot]
                    { __DEFAULT ->
                          case +# [sc2_sQ7S 1] of sat_sQ7Z {
                            __DEFAULT -> Main.$fe_threadring_$sa sc_sQ7Q ipv1_sQ7V sat_sQ7Z;
                          };
                    };
              };
        };
Main.$fe_threadring1
  :: GHC.Types.Int
     -> GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, Java.Array.JIntArray #)
[GblId, Arity=3, Str=<L,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    \r srt:SRT:[rF :-> GHC.Conc.Sync.$wa1, rKEJ :-> Main.$wthread,
                rKEL :-> Main.$fe_threadring_$sa1] [ring_sQ80 msgs_sQ81 eta_sQ82]
        case GHC.Conc.Sync.$wa1 1 eta_sQ82 of _ [Occ=Dead] {
          (#,#) ipv_sQ84 [Occ=Once] _ [Occ=Dead] ->
              case newMVar# [ipv_sQ84] of _ [Occ=Dead] {
                (#,#) ipv2_sQ87 [Occ=Once] ipv3_sQ88 ->
                    case
                        putMVar# [ipv3_sQ88 msgs_sQ81 ipv2_sQ87]
                    of
                    s2#_sQ89 [OS=OneShot]
                    { __DEFAULT ->
                          case newMVar# [s2#_sQ89] of _ [Occ=Dead] {
                            (#,#) ipv4_sQ8B [Occ=Once] ipv5_sQ8C ->
                                case ring_sQ80 of _ [Occ=Dead] {
                                  GHC.Types.I# y_sQ8E [Occ=Once] ->
                                      let {
                                        a2_sQ8F :: GHC.MVar.MVar GHC.Types.Int
                                        [LclId, Str=, Unf=OtherCon []] =
                                            NO_CCS GHC.MVar.MVar! [ipv3_sQ88];
                                      } in 
                                        case GHC.Enum.eftInt 2 y_sQ8E of sat_sQ8G {
                                          __DEFAULT ->
                                              case
                                                  Main.$fe_threadring_$sa1
                                                      ipv4_sQ8B a2_sQ8F GHC.Types.[] sat_sQ8G
                                              of
                                              _ [Occ=Dead]
                                              { (#,#) ipv6_sQ8I [Occ=Once] ipv7_sQ8J [Occ=Once!] ->
                                                    case ipv7_sQ8J of _ [Occ=Dead] {
                                                      (,) z_sQ8L [Occ=Once] xs_sQ8M [Occ=Once] ->
                                                          let {
                                                            ret_sQ8N :: GHC.MVar.MVar GHC.Types.Int
                                                            [LclId, Str=, Unf=OtherCon []] =
                                                                NO_CCS GHC.MVar.MVar! [ipv5_sQ8C];
                                                          } in 
                                                            let {
                                                              sat_sQ8W [Occ=Once] :: GHC.Types.IO ()
                                                              [LclId, Str=] =
                                                                  \r srt:SRT:[rKEJ :-> Main.$wthread] [s_sQ8O]
                                                                      let {
                                                                        sat_sQ8S [Occ=Once]
                                                                          :: GHC.Prim.Any
                                                                        [LclId, Str=] =
                                                                            \u srt:SRT:[rKEJ :-> Main.$wthread] []
                                                                                case
                                                                                    Main.$wthread
                                                                                        ret_sQ8N
                                                                                        z_sQ8L
                                                                                        a2_sQ8F
                                                                                of
                                                                                _ [Occ=Dead]
                                                                                { Unit# ww1_sQ8R [Occ=Once!] ->
                                                                                      ww1_sQ8R
                                                                                          Control.Concurrent.Fiber.unFiber1
                                                                                          s_sQ8O;
                                                                                };
                                                                      } in 
                                                                        case
                                                                            __primcall  eta.runtime.stg.Stg.trampoline [sat_sQ8S]
                                                                        of
                                                                        _ [Occ=Dead]
                                                                        { Unit# ipv8_sQ8U ->
                                                                              case
                                                                                  freshStateToken# [ipv8_sQ8U]
                                                                              of
                                                                              wild2_sQ8V [OS=OneShot]
                                                                              { __DEFAULT ->
                                                                                    (#,#) [wild2_sQ8V
                                                                                           ipv8_sQ8U];
                                                                              };
                                                                        };
                                                            } in 
                                                              case
                                                                  fork# [sat_sQ8W ipv6_sQ8I]
                                                              of
                                                              _ [Occ=Dead]
                                                              { (#,#) ipv8_sQ8Y [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                    let {
                                                                      sat_sQ90 [Occ=Once]
                                                                        :: [GHC.MVar.MVar
                                                                              GHC.Types.Int]
                                                                      [LclId, Str=] =
                                                                          NO_CCS :! [ret_sQ8N
                                                                                     xs_sQ8M];
                                                                    } in 
                                                                      case
                                                                          GHC.List.reverse1
                                                                              sat_sQ90 GHC.Types.[]
                                                                      of
                                                                      sat_sQ91
                                                                      { __DEFAULT ->
                                                                            case
                                                                                Main.$fe_threadring2
                                                                                    sat_sQ91
                                                                                    ipv8_sQ8Y
                                                                            of
                                                                            _ [Occ=Dead]
                                                                            { (#,#) ipv10_sQ93 [Occ=Once]
                                                                                    ipv11_sQ94 ->
                                                                                  let {
                                                                                    sat_sQ9L [Occ=Once]
                                                                                      :: Java.Array.JIntArray
                                                                                    [LclId, Str=] =
                                                                                        \u srt:SRT:[] []
                                                                                            case
                                                                                                case
                                                                                                    noDuplicate# [GHC.Prim.realWorld#]
                                                                                                of
                                                                                                s'_sQ95 [OS=OneShot]
                                                                                                { __DEFAULT ->
                                                                                                      case
                                                                                                          GHC.List.$wlenAcc
                                                                                                              ipv11_sQ94
                                                                                                              0
                                                                                                      of
                                                                                                      ww2_sQ96
                                                                                                      { __DEFAULT ->
                                                                                                            case
                                                                                                                newJIntArray# [ww2_sQ96
                                                                                                                               GHC.Prim.realWorld#]
                                                                                                            of
                                                                                                            _ [Occ=Dead]
                                                                                                            { (#,#) _ [Occ=Dead]
                                                                                                                    ipv13_sQ99 ->
                                                                                                                  case
                                                                                                                      freshNullObjectToken# [s'_sQ95]
                                                                                                                  of
                                                                                                                  o_sQ9A
                                                                                                                  { __DEFAULT ->
                                                                                                                        case
                                                                                                                            freshObjectToken# [o_sQ9A
                                                                                                                                               ipv13_sQ99]
                                                                                                                        of
                                                                                                                        sat_sQ9B
                                                                                                                        { __DEFAULT ->
                                                                                                                              case
                                                                                                                                  Main.$fe_threadring_$sa
                                                                                                                                      sat_sQ9B
                                                                                                                                      ipv11_sQ94
                                                                                                                                      0
                                                                                                                              of
                                                                                                                              _ [Occ=Dead]
                                                                                                                              { (#,#) ipv14_sQ9D [Occ=Once]
                                                                                                                                      _ [Occ=Dead] ->
                                                                                                                                    let {
                                                                                                                                      sat_sQ9H [Occ=Once]
                                                                                                                                        :: Java.Array.JIntArray
                                                                                                                                      [LclId,
                                                                                                                                       Str=] =
                                                                                                                                          NO_CCS Java.Array.JIntArray! [ipv13_sQ99];
                                                                                                                                    } in 
                                                                                                                                      case
                                                                                                                                          freshObjectToken# [ipv14_sQ9D
                                                                                                                                                             o_sQ9A]
                                                                                                                                      of
                                                                                                                                      sat_sQ9F
                                                                                                                                      { __DEFAULT ->
                                                                                                                                            case
                                                                                                                                                freshStateToken# [sat_sQ9F]
                                                                                                                                            of
                                                                                                                                            sat_sQ9G [OS=OneShot]
                                                                                                                                            { __DEFAULT ->
                                                                                                                                                  (#,#) [sat_sQ9G
                                                                                                                                                         sat_sQ9H];
                                                                                                                                            };
                                                                                                                                      };
                                                                                                                              };
                                                                                                                        };
                                                                                                                  };
                                                                                                            };
                                                                                                      };
                                                                                                }
                                                                                            of
                                                                                            _ [Occ=Dead]
                                                                                            { (#,#) _ [Occ=Dead]
                                                                                                    ipv13_sQ9K [Occ=Once] ->
                                                                                                  ipv13_sQ9K;
                                                                                            };
                                                                                  } in 
                                                                                    (#,#) [ipv10_sQ93
                                                                                           sat_sQ9L];
                                                                            };
                                                                      };
                                                              };
                                                    };
                                              };
                                        };
                                };
                          };
                    };
              };
        };
Main.$fe_threadring
  :: GHC.Types.Int
     -> GHC.Types.Int -> GHC.Types.IO Java.Array.JIntArray
[GblId, Arity=3, Str=<L,1*U(U)><L,U><S,U>, Unf=OtherCon []] =
    \r srt:SRT:[rKEM :-> Main.$fe_threadring1] [eta_B3 eta_B2 eta_B1]
        Main.$fe_threadring1 eta_B3 eta_B2 eta_B1;
Main.main4 :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    NO_CCS GHC.Types.I#! [503];
Main.main1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    \r srt:SRT:[r518 :-> GHC.List.badHead,
                rFJ4 :-> GHC.Read.$fRead_Int_$sconvertInt, rFJ5 :-> GHC.Read.$wa23,
                rKE8 :-> Main.main2, rKE9 :-> Main.main3,
                rKEM :-> Main.$fe_threadring1] [s_sQ9M]
        case System.Environment.getArgs1 s_sQ9M of _ [Occ=Dead] {
          (#,#) ipv_sQ9O [Occ=Once] ipv1_sQ9P [Occ=Once!] ->
              let {
                sat_sQA4 [Occ=Once] :: GHC.Types.Int
                [LclId, Str=] =
                    \u srt:SRT:[r518 :-> GHC.List.badHead,
                                rFJ4 :-> GHC.Read.$fRead_Int_$sconvertInt, rFJ5 :-> GHC.Read.$wa23,
                                rKE8 :-> Main.main2, rKE9 :-> Main.main3] []
                        case
                            GHC.Read.$wa23
                                GHC.Read.$fRead_Int_$sconvertInt
                                Text.ParserCombinators.ReadPrec.minPrec
                                Text.Read.readEither5
                        of
                        _ [Occ=Dead]
                        { Unit# ww1_sQ9R [Occ=Once] ->
                              let {
                                sat_sQ9W [Occ=Once] :: GHC.Base.String
                                [LclId, Str=] =
                                    \u srt:SRT:[r518 :-> GHC.List.badHead] []
                                        case ipv1_sQ9P of _ [Occ=Dead] {
                                          [] -> GHC.List.badHead;
                                          : x_sQ9U [Occ=Once] _ [Occ=Dead] -> x_sQ9U;
                                        }; } in
                              let {
                                sat_sQ9S [Occ=Once] :: Text.ParserCombinators.ReadP.P GHC.Types.Int
                                [LclId, Str=] =
                                    NO_CCS Text.ParserCombinators.ReadP.Look! [ww1_sQ9R];
                              } in 
                                case
                                    Text.ParserCombinators.ReadP.run sat_sQ9S sat_sQ9W
                                of
                                sat_sQ9X
                                { __DEFAULT ->
                                      case Text.Read.readEither6 sat_sQ9X of _ [Occ=Dead] {
                                        [] -> Main.main3;
                                        : x_sQ9Z [Occ=Once] ds1_sQA0 [Occ=Once!] ->
                                            case ds1_sQA0 of _ [Occ=Dead] {
                                              [] -> x_sQ9Z;
                                              : _ [Occ=Dead] _ [Occ=Dead] -> Main.main2;
                                            };
                                      };
                                };
                        };
              } in 
                case
                    Main.$fe_threadring1 Main.main4 sat_sQA4 ipv_sQ9O
                of
                _ [Occ=Dead]
                { (#,#) ipv2_sQA6 [Occ=Once] _ [Occ=Dead] ->
                      (#,#) [ipv2_sQA6 GHC.Tuple.()];
                };
        };
Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    \r srt:SRT:[rKEE :-> Main.main1] [eta_B1] Main.main1 eta_B1;
Main.main5
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    \r srt:SRT:[rJU5 :-> GHC.TopHandler.runMainIO2,
                rKEE :-> Main.main1] [eta_sQA8]
        catch# [Main.main1 GHC.TopHandler.runMainIO2 eta_sQA8];
:Main.main :: GHC.Types.IO ()
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    \r srt:SRT:[rKE7 :-> Main.main5] [eta_B1] Main.main5 eta_B1;

