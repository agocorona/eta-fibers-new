
==================== STG syntax: ====================
2018-07-30 11:26:00.947167 UTC

Control.Concurrent.Fiber.**>
  :: forall (m_a3JF :: * -> *).
     Control.Concurrent.Fiber.AdditionalOperators m_a3JF =>
     forall a_a3JG[sk] b_a3JH[sk].
     m_a3JF a_a3JG[sk] -> m_a3JF b_a3JH[sk] -> m_a3JF b_a3JH[sk]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLL),U(U,A,A,A,A)>,
 Unf=OtherCon [],
 RULES: Built in rule for Control.Concurrent.Fiber.**>: "Class op **>"] =
    \r srt:SRT:[] [tpl_sIMV]
        case tpl_sIMV of _ [Occ=Dead] {
          Control.Concurrent.Fiber.D:AdditionalOperators tpl_sIMX [Occ=Once]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead] ->
              tpl_sIMX;
        };
Control.Concurrent.Fiber.<**
  :: forall (m_a3JF :: * -> *).
     Control.Concurrent.Fiber.AdditionalOperators m_a3JF =>
     forall a_a3JI[sk] b_a3JJ[sk].
     m_a3JF a_a3JI[sk] -> m_a3JF b_a3JJ[sk] -> m_a3JF a_a3JI[sk]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLL),U(A,U,A,A,A)>,
 Unf=OtherCon [],
 RULES: Built in rule for Control.Concurrent.Fiber.<**: "Class op <**"] =
    \r srt:SRT:[] [tpl_sIN2]
        case tpl_sIN2 of _ [Occ=Dead] {
          Control.Concurrent.Fiber.D:AdditionalOperators _ [Occ=Dead]
                                                         tpl_sIN5 [Occ=Once]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead] ->
              tpl_sIN5;
        };
Control.Concurrent.Fiber.atEnd'
  :: forall (m_a3JF :: * -> *).
     Control.Concurrent.Fiber.AdditionalOperators m_a3JF =>
     forall a_a3JK[sk] b_a3JL[sk].
     m_a3JF a_a3JK[sk] -> m_a3JF b_a3JL[sk] -> m_a3JF a_a3JK[sk]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLL),U(A,A,U,A,A)>,
 Unf=OtherCon [],
 RULES: Built in rule for Control.Concurrent.Fiber.atEnd': "Class op atEnd'"] =
    \r srt:SRT:[] [tpl_sIN9]
        case tpl_sIN9 of _ [Occ=Dead] {
          Control.Concurrent.Fiber.D:AdditionalOperators _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         tpl_sIND [Occ=Once]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead] ->
              tpl_sIND;
        };
Control.Concurrent.Fiber.<***
  :: forall (m_a3JF :: * -> *).
     Control.Concurrent.Fiber.AdditionalOperators m_a3JF =>
     forall a_a3JM[sk] b_a3JN[sk].
     m_a3JF a_a3JM[sk] -> m_a3JF b_a3JN[sk] -> m_a3JF a_a3JM[sk]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSL),U(A,A,A,U,A)>,
 Unf=OtherCon [],
 RULES: Built in rule for Control.Concurrent.Fiber.<***: "Class op <***"] =
    \r srt:SRT:[] [tpl_sING]
        case tpl_sING of _ [Occ=Dead] {
          Control.Concurrent.Fiber.D:AdditionalOperators _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         tpl_sINL [Occ=Once]
                                                         _ [Occ=Dead] ->
              tpl_sINL;
        };
Control.Concurrent.Fiber.atEnd
  :: forall (m_a3JF :: * -> *).
     Control.Concurrent.Fiber.AdditionalOperators m_a3JF =>
     forall a_a3JO[sk] b_a3JP[sk].
     m_a3JF a_a3JO[sk] -> m_a3JF b_a3JP[sk] -> m_a3JF a_a3JO[sk]
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLS),U(A,A,A,A,U)>,
 Unf=OtherCon [],
 RULES: Built in rule for Control.Concurrent.Fiber.atEnd: "Class op atEnd"] =
    \r srt:SRT:[] [tpl_sINN]
        case tpl_sINN of _ [Occ=Dead] {
          Control.Concurrent.Fiber.D:AdditionalOperators _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         _ [Occ=Dead]
                                                         tpl_sINT [Occ=Once] ->
              tpl_sINT;
        };
Control.Concurrent.Fiber.$fMonad_Fiber_$s$dmfail
  :: forall a_a8LA.
     GHC.Base.String -> Control.Concurrent.Fiber.Fiber a_a8LA
[GblId, Arity=1, Str=<B,U>b, Unf=OtherCon []] =
    \r srt:SRT:[r2Q :-> GHC.Err.errorWithoutStackTrace] [eta_sINU]
        GHC.Err.errorWithoutStackTrace eta_sINU;
Control.Concurrent.Fiber.$fException_Empty1 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "Empty"#;
Control.Concurrent.Fiber.$fException_Empty_$cshow
  :: Control.Concurrent.Fiber.Empty -> GHC.Base.String
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    \r srt:SRT:[r38 :-> Control.Concurrent.Fiber.$fException_Empty1] [ds_sINV]
        Control.Concurrent.Fiber.$fException_Empty1;
Control.Concurrent.Fiber.$fShow_Empty_$cshowsPrec
  :: GHC.Types.Int
     -> Control.Concurrent.Fiber.Empty -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><L,A><L,1*U>, Unf=OtherCon []] =
    \r srt:SRT:[r38 :-> Control.Concurrent.Fiber.$fException_Empty1] [ds_sINW
                                                                      x_sINX
                                                                      s_sINY]
        GHC.Base.++ Control.Concurrent.Fiber.$fException_Empty1 s_sINY;
Control.Concurrent.Fiber.$s$dmshowList1
  :: Control.Concurrent.Fiber.Empty
     -> GHC.Base.String -> [GHC.Types.Char]
[GblId, Arity=2, Str=, Unf=OtherCon []] =
    \r srt:SRT:[r38 :-> Control.Concurrent.Fiber.$fException_Empty1] [x_sINZ
                                                                      s_sIO0]
        GHC.Base.++ Control.Concurrent.Fiber.$fException_Empty1 s_sIO0;
Control.Concurrent.Fiber.$fShow_Empty_$cshowList
  :: [Control.Concurrent.Fiber.Empty] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    \r srt:SRT:[r26 :-> Control.Concurrent.Fiber.$s$dmshowList1] [ls_sIO1
                                                                  s_sIO2]
        GHC.Show.showList__
            Control.Concurrent.Fiber.$s$dmshowList1 ls_sIO1 s_sIO2;
Control.Concurrent.Fiber.$fShow_Empty [InlPrag=[ALWAYS] CONLIKE]
  :: GHC.Show.Show Control.Concurrent.Fiber.Empty
[GblId[DFunId], Str=m, Unf=OtherCon []] =
    NO_CCS GHC.Show.D:Show! [Control.Concurrent.Fiber.$fShow_Empty_$cshowsPrec
                             Control.Concurrent.Fiber.$fException_Empty_$cshow
                             Control.Concurrent.Fiber.$fShow_Empty_$cshowList];
Control.Concurrent.Fiber.runFiberC
  :: forall a_a3OT.
     Control.Concurrent.Fiber.Fiber a_a3OT
     -> (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a_a3OT)
     -> GHC.Types.IO a_a3OT
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [ds_sIO3]
        case ds_sIO3 of _ [Occ=Dead] {
          Control.Concurrent.Fiber.Fiber ds1_sIO5 [Occ=Once] -> ds1_sIO5;
        };
Control.Concurrent.Fiber.!>
  :: forall a_a7FB a1_a7FC.
     GHC.Show.Show a1_a7FC =>
     a_a7FB -> a1_a7FC -> a_a7FB
[GblId,
 Arity=3,
 Str=<S(LC(S)L),1*U(A,1*C1(U),A)><L,U><L,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[r5A :-> Debug.Trace.trace] [$dShow_sIO6 x_sIO7 y_sIO8]
        case GHC.Show.show $dShow_sIO6 y_sIO8 of sat_sIO9 {
          __DEFAULT -> Debug.Trace.trace sat_sIO9 x_sIO7;
        };
Control.Concurrent.Fiber.trampolineIO1
  :: forall a_a5OG.
     GHC.Types.IO a_a5OG
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a5OG #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [ds_sIOA s_sIOB]
        let {
          sat_sIOD [Occ=Once] :: GHC.Prim.Any
          [LclId, Str=] =
              \u srt:SRT:[] [] ds_sIOA s_sIOB;
        } in 
          case
              __primcall  eta.runtime.stg.Stg.trampoline [sat_sIOD]
          of
          _ [Occ=Dead]
          { Unit# ipv_sIOF ->
                case freshStateToken# [ipv_sIOF] of wild_sIOG [OS=OneShot] {
                  __DEFAULT -> (#,#) [wild_sIOG ipv_sIOF];
                };
          };
Control.Concurrent.Fiber.trampolineIO
  :: forall a_a3Q9. GHC.Types.IO a_a3Q9 -> GHC.Types.IO a_a3Q9
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B2 eta_B1]
        Control.Concurrent.Fiber.trampolineIO1 eta_B2 eta_B1;
Control.Concurrent.Fiber.dontWorryEverithingisOk
  :: forall a_a5V7 b_a5V8. a_a5V7 -> b_a5V8
[GblId, Arity=1, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B1] Unsafe.Coerce.unsafeCoerce1 eta_B1;
Control.Concurrent.Fiber.fdyn
  :: forall a_a3Q5. Control.Concurrent.Fiber.Dyn -> a_a3Q5
[GblId, Arity=1, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B1] Unsafe.Coerce.unsafeCoerce1 eta_B1;
Control.Concurrent.Fiber.tdyn
  :: forall a_a3Q6. a_a3Q6 -> Control.Concurrent.Fiber.Dyn
[GblId, Arity=1, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B1] Unsafe.Coerce.unsafeCoerce1 eta_B1;
Control.Concurrent.Fiber.$fApplicative_Fiber_$cpure
  :: forall a_a7S9. a_a7S9 -> Control.Concurrent.Fiber.Fiber a_a7S9
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m, Unf=OtherCon []] =
    \r srt:SRT:[] [a3_sIOH]
        let {
          sat_sIOJ [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a7SA)
               -> GHC.Types.IO a2_a7SA
          [LclId, Str=] =
              \r srt:SRT:[] [ds_sIOI] ds_sIOI a3_sIOH;
        } in  Control.Concurrent.Fiber.Fiber [sat_sIOJ];
Control.Concurrent.Fiber.ety
  :: forall a_a3Q7 b_a3Q8. a_a3Q7 -> b_a3Q8
[GblId, Arity=1, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B1] Unsafe.Coerce.unsafeCoerce1 eta_B1;
Control.Concurrent.Fiber.$wcallCC [InlPrag=[0]]
  :: forall a_a3Q3 b_a3Q4.
     ((a_a3Q3 -> Control.Concurrent.Fiber.Fiber b_a3Q4)
      -> Control.Concurrent.Fiber.Fiber a_a3Q3)
     -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a_a3Q3)
           -> GHC.Types.IO a_a3Q3 #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,C(U(1*C1(U)))>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [w_sIOK]
        let {
          sat_sIOT [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a3Q3)
               -> GHC.Types.IO a2_a3Q3
          [LclId, Str=] =
              \r srt:SRT:[] [c_sIOL]
                  let {
                    sat_sIOQ [Occ=Once]
                      :: a2_a3Q3 -> Control.Concurrent.Fiber.Fiber b_a3Q4
                    [LclId, Str=] =
                        \r srt:SRT:[] [x_sIOM]
                            let {
                              a3_sION [Occ=OnceL] :: GHC.Types.IO a2_a3Q3
                              [LclId, Str=] =
                                  \u srt:SRT:[] [] c_sIOL x_sIOM;
                            } in 
                              let {
                                sat_sIOP [Occ=Once]
                                  :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a3Q4)
                                     -> GHC.Types.IO b_a3Q4
                                [LclId, Str=] =
                                    \r srt:SRT:[] [ds_sIOO] a3_sION;
                              } in  Control.Concurrent.Fiber.Fiber [sat_sIOP];
                  } in 
                    case w_sIOK sat_sIOQ of _ [Occ=Dead] {
                      Control.Concurrent.Fiber.Fiber ds_sIOS [Occ=Once!] ->
                          ds_sIOS c_sIOL;
                    };
        } in  Unit# [sat_sIOT];
Control.Concurrent.Fiber.callCC [InlPrag=INLINE[0]]
  :: forall a_a3Q3 b_a3Q4.
     ((a_a3Q3 -> Control.Concurrent.Fiber.Fiber b_a3Q4)
      -> Control.Concurrent.Fiber.Fiber a_a3Q3)
     -> Control.Concurrent.Fiber.Fiber a_a3Q3
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,C(U(1*C1(U)))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [w_sIOU]
        case Control.Concurrent.Fiber.$wcallCC w_sIOU of _ [Occ=Dead] {
          Unit# ww1_sIOW [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sIOW];
        };
Control.Concurrent.Fiber.$fFunctor_Fiber_$cfmap [InlPrag=INLINE[0]]
  :: forall a_a8I9 b_a8IA.
     (a_a8I9 -> b_a8IA)
     -> Control.Concurrent.Fiber.Fiber a_a8I9
     -> Control.Concurrent.Fiber.Fiber b_a8IA
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,C(U)><L,U(C(U))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [w_sIOX w1_sIOY]
        let {
          sat_sIP5 [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a8IA)
               -> GHC.Types.IO b_a8IA
          [LclId, Str=] =
              \r srt:SRT:[] [c_sIOZ]
                  case w1_sIOY of _ [Occ=Dead] {
                    Control.Concurrent.Fiber.Fiber ds_sIP1 [Occ=Once!] ->
                        let {
                          sat_sIP4 [Occ=Once]
                            :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a8I9
                          [LclId, Str=] =
                              \r srt:SRT:[] [x_sIP2]
                                  let {
                                    sat_sIP3 [Occ=Once] :: Control.Concurrent.Fiber.Dyn
                                    [LclId, Str=] =
                                        \u srt:SRT:[] [] w_sIOX x_sIP2;
                                  } in  c_sIOZ sat_sIP3;
                        } in  ds_sIP1 sat_sIP4;
                  };
        } in  Control.Concurrent.Fiber.Fiber [sat_sIP5];
Control.Concurrent.Fiber.$fFunctor_Fiber_$c<$
  :: forall a_a8J4 b_a8J5.
     a_a8J4
     -> Control.Concurrent.Fiber.Fiber b_a8J5
     -> Control.Concurrent.Fiber.Fiber a_a8J4
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U(C(U))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [eta_sIP6 m_sIP7]
        let {
          sat_sIPE [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a95B)
               -> GHC.Types.IO a2_a95B
          [LclId, Str=] =
              \r srt:SRT:[] [c_sIP8]
                  case m_sIP7 of _ [Occ=Dead] {
                    Control.Concurrent.Fiber.Fiber ds_sIPA [Occ=Once!] ->
                        let {
                          lvl1_sIPB [Occ=OnceL] :: GHC.Types.IO a2_a95B
                          [LclId, Str=] =
                              \u srt:SRT:[] [] c_sIP8 eta_sIP6;
                        } in 
                          let {
                            sat_sIPD [Occ=Once]
                              :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a95C
                            [LclId, Str=] =
                                \r srt:SRT:[] [x_sIPC] lvl1_sIPB;
                          } in  ds_sIPA sat_sIPD;
                  };
        } in  Control.Concurrent.Fiber.Fiber [sat_sIPE];
Control.Concurrent.Fiber.$fFunctor_Fiber [InlPrag=[ALWAYS] CONLIKE]
  :: GHC.Base.Functor Control.Concurrent.Fiber.Fiber
[GblId[DFunId], Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    NO_CCS GHC.Base.D:Functor! [Control.Concurrent.Fiber.$fFunctor_Fiber_$cfmap
                                Control.Concurrent.Fiber.$fFunctor_Fiber_$c<$];
Control.Concurrent.Fiber.$fMonad_Fiber_$c>>= [InlPrag=INLINE[0]]
  :: forall a_a5P2 b_a5P3.
     Control.Concurrent.Fiber.Fiber a_a5P2
     -> (a_a5P2 -> Control.Concurrent.Fiber.Fiber b_a5P3)
     -> Control.Concurrent.Fiber.Fiber b_a5P3
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(C(U))><L,C(U(1*C1(U)))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [w_sIPF w1_sIPG]
        let {
          sat_sIPO [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a5P3)
               -> GHC.Types.IO b_a5P3
          [LclId, Str=] =
              \r srt:SRT:[] [c_sIPH]
                  case w_sIPF of _ [Occ=Dead] {
                    Control.Concurrent.Fiber.Fiber ds_sIPJ [Occ=Once!] ->
                        let {
                          sat_sIPN [Occ=Once]
                            :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a5P2
                          [LclId, Str=] =
                              \r srt:SRT:[] [x_sIPK]
                                  case w1_sIPG x_sIPK of _ [Occ=Dead] {
                                    Control.Concurrent.Fiber.Fiber ds1_sIPM [Occ=Once!] ->
                                        ds1_sIPM c_sIPH;
                                  };
                        } in  ds_sIPJ sat_sIPN;
                  };
        } in  Control.Concurrent.Fiber.Fiber [sat_sIPO];
Control.Concurrent.Fiber.$fAlternative_Fiber21
  :: Data.Typeable.Internal.TypeRep
[GblId, Str=m] =
    \u srt:SRT:[] []
        case "main"# of a2_sIPP {
          __DEFAULT ->
              let {
                ww2_sIPQ [Occ=Once] :: GHC.Base.String
                [LclId, Str=] =
                    \u srt:SRT:[] [] GHC.CString.unpackCString# a2_sIPP;
              } in 
                case "Control.Concurrent.Fiber"# of a3_sIPR {
                  __DEFAULT ->
                      let {
                        ww3_sIPS [Occ=Once] :: GHC.Base.String
                        [LclId, Str=] =
                            \u srt:SRT:[] [] GHC.CString.unpackCString# a3_sIPR;
                      } in 
                        case "Empty"# of a4_sIPT {
                          __DEFAULT ->
                              let {
                                ww4_sIPU [Occ=Once] :: GHC.Base.String
                                [LclId, Str=] =
                                    \u srt:SRT:[] [] GHC.CString.unpackCString# a4_sIPT; } in
                              let {
                                wild_sIPV [Occ=Once] :: Data.Typeable.Internal.TyCon
                                [LclId, Str=, Unf=OtherCon []] =
                                    NO_CCS Data.Typeable.Internal.TyCon! [__word64 9165126383769694201
                                                                          __word64 1127572134284911454
                                                                          ww2_sIPQ
                                                                          ww3_sIPS
                                                                          ww4_sIPU];
                              } in 
                                Data.Typeable.Internal.TypeRep [__word64 9165126383769694201
                                                                __word64 1127572134284911454
                                                                wild_sIPV
                                                                GHC.Types.[]
                                                                GHC.Types.[]];
                        };
                };
        };
Control.Concurrent.Fiber.$fException_Empty3
  :: GHC.Prim.Proxy# Control.Concurrent.Fiber.Empty
     -> Data.Typeable.Internal.TypeRep
[GblId, Arity=1, Str=<L,A>m, Unf=OtherCon []] =
    \r srt:SRT:[r4B :-> Control.Concurrent.Fiber.$fAlternative_Fiber21] [wild_sIPW]
        Control.Concurrent.Fiber.$fAlternative_Fiber21;
Control.Concurrent.Fiber.$fException_Empty2
  :: Data.Typeable.Internal.Typeable Control.Concurrent.Fiber.Empty
[GblId, Arity=1, Str=<L,A>m, Unf=OtherCon []] =
    \r srt:SRT:[r37 :-> Control.Concurrent.Fiber.$fException_Empty3] [eta_B1]
        Control.Concurrent.Fiber.$fException_Empty3 eta_B1;
Control.Concurrent.Fiber.$fException_Empty_$cfromException
  :: GHC.Exception.SomeException
     -> GHC.Maybe.Maybe Control.Concurrent.Fiber.Empty
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    \r srt:SRT:[r4B :-> Control.Concurrent.Fiber.$fAlternative_Fiber21] [eta_sIPX]
        case eta_sIPX of _ [Occ=Dead] {
          GHC.Exception.SomeException $dException1_sIPZ [Occ=Once]
                                      e2_sIQ0 [Occ=Once] ->
              case
                  GHC.Exception.$p1Exception $dException1_sIPZ GHC.Prim.proxy#
              of
              _ [Occ=Dead]
              { Data.Typeable.Internal.TypeRep dt_sIQ2 [Occ=Once]
                                               dt1_sIQ3 [Occ=Once]
                                               _ [Occ=Dead]
                                               _ [Occ=Dead]
                                               _ [Occ=Dead] ->
                    case
                        Control.Concurrent.Fiber.$fAlternative_Fiber21
                    of
                    _ [Occ=Dead]
                    { Data.Typeable.Internal.TypeRep dt2_sIQ8 [Occ=Once]
                                                     dt3_sIQ9 [Occ=Once]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead] ->
                          case eqWord64# [dt_sIQ2 dt2_sIQ8] of _ [Occ=Dead] {
                            __DEFAULT -> GHC.Maybe.Nothing [];
                            1 ->
                                case eqWord64# [dt1_sIQ3 dt3_sIQ9] of _ [Occ=Dead] {
                                  __DEFAULT -> GHC.Maybe.Nothing [];
                                  1 -> GHC.Maybe.Just [e2_sIQ0];
                                };
                          };
                    };
              };
        };
Control.Concurrent.Fiber.$fException_Empty_$cdisplayException
  :: Control.Concurrent.Fiber.Empty -> GHC.Base.String
[GblId, Arity=1, Str=<L,A>, Unf=OtherCon []] =
    \r srt:SRT:[r35 :-> Control.Concurrent.Fiber.$fException_Empty_$cshow] [eta_B1]
        Control.Concurrent.Fiber.$fException_Empty_$cshow eta_B1;
Control.Concurrent.Fiber.$fException_Empty [InlPrag=[ALWAYS] CONLIKE]
  :: GHC.Exception.Exception Control.Concurrent.Fiber.Empty
[GblId[DFunId], Str=m, Unf=OtherCon []] =
    NO_CCS GHC.Exception.D:Exception! [Control.Concurrent.Fiber.$fException_Empty3
                                       Control.Concurrent.Fiber.$fShow_Empty
                                       Control.Concurrent.Fiber.$fException_Empty_$ctoException
                                       Control.Concurrent.Fiber.$fException_Empty_$cfromException
                                       Control.Concurrent.Fiber.$fException_Empty_$cshow];
Control.Concurrent.Fiber.$fException_Empty_$ctoException [Occ=LoopBreaker]
  :: Control.Concurrent.Fiber.Empty -> GHC.Exception.SomeException
[GblId, Arity=1, Str=, Unf=OtherCon []] =
    \r srt:SRT:[r3F :-> Control.Concurrent.Fiber.$fException_Empty] [eta_B1]
        GHC.Exception.SomeException [Control.Concurrent.Fiber.$fException_Empty
                                     eta_B1];
Control.Concurrent.Fiber.unFiber1
  :: forall a_a5N4.
     Control.Concurrent.Fiber.Dyn
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a5N4 #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><S,U>, Unf=OtherCon []] =
    \r srt:SRT:[] [x_sIQF s_sIQG] (#,#) [s_sIQG x_sIQF];
Control.Concurrent.Fiber.unFiber
  :: forall t_a5Y6.
     Control.Concurrent.Fiber.Fiber t_a5Y6
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, t_a5Y6 #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(U)))><L,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [x_sIQH s_sIQI]
        let {
          sat_sIQM [Occ=Once] :: GHC.Prim.Any
          [LclId, Str=] =
              \u srt:SRT:[] []
                  case x_sIQH of _ [Occ=Dead] {
                    Control.Concurrent.Fiber.Fiber ds_sIQL [Occ=Once!] ->
                        ds_sIQL Control.Concurrent.Fiber.unFiber1 s_sIQI;
                  };
        } in 
          case
              __primcall  eta.runtime.stg.Stg.trampoline [sat_sIQM]
          of
          _ [Occ=Dead]
          { Unit# ipv_sIQO ->
                case freshStateToken# [ipv_sIQO] of wild_sIQP [OS=OneShot] {
                  __DEFAULT -> (#,#) [wild_sIQP ipv_sIQO];
                };
          };
Control.Concurrent.Fiber.runFiber
  :: forall a_a3Q2.
     Control.Concurrent.Fiber.Fiber a_a3Q2 -> GHC.Types.IO a_a3Q2
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(U)))><L,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B2 eta_B1]
        Control.Concurrent.Fiber.unFiber eta_B2 eta_B1;
Control.Concurrent.Fiber.$fMonadIO_Fiber_$cliftIO
  :: forall a_a5Z7.
     GHC.Types.IO a_a5Z7 -> Control.Concurrent.Fiber.Fiber a_a5Z7
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,C(U(U,U))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [x_sIQQ]
        let {
          sat_sIQW [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a8JG)
               -> GHC.Types.IO a2_a8JG
          [LclId, Str=] =
              \r srt:SRT:[] [k_sIQR s_sIQS]
                  case x_sIQQ s_sIQS of _ [Occ=Dead] {
                    (#,#) ipv_sIQU [Occ=Once] ipv1_sIQV [Occ=Once] ->
                        k_sIQR ipv1_sIQV ipv_sIQU;
                  };
        } in  Control.Concurrent.Fiber.Fiber [sat_sIQW];
Control.Concurrent.Fiber.$fAlternative_Fiber8
  :: forall a_a7MA. GHC.Types.IO a_a7MA
[GblId, Str=b] =
    \u srt:SRT:[r3F :-> Control.Concurrent.Fiber.$fException_Empty] []
        GHC.Exception.throw
            Control.Concurrent.Fiber.$fException_Empty
            Control.Concurrent.Fiber.Empty;
Control.Concurrent.Fiber.$fAlternative_Fiber31
  :: forall a_a7MA.
     (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a_a7MA)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a_a7MA #)
[GblId, Arity=2, Str=<B,A><B,A>b, Unf=OtherCon []] =
    \r srt:SRT:[r3U :-> Control.Concurrent.Fiber.$fAlternative_Fiber8] [k_sIQX
                                                                        s_sIQY]
        Control.Concurrent.Fiber.$fAlternative_Fiber8;
Control.Concurrent.Fiber.$fAlternative_Fiber_$cempty
  :: forall a_a5ZQ. Control.Concurrent.Fiber.Fiber a_a5ZQ
[GblId, Str=m, Unf=OtherCon []] =
    NO_CCS Control.Concurrent.Fiber.Fiber! [Control.Concurrent.Fiber.$fAlternative_Fiber31];
Control.Concurrent.Fiber.$fMonad_Fiber_$creturn
  :: forall a_a5PB. a_a5PB -> Control.Concurrent.Fiber.Fiber a_a5PB
[GblId, Arity=1, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B1]
        Control.Concurrent.Fiber.$fApplicative_Fiber_$cpure eta_B1;
Control.Concurrent.Fiber.$fAlternative_Fiber6 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "JUST"#;
Control.Concurrent.Fiber.$fAlternative_Fiber11 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "throwempty"#;
Control.Concurrent.Fiber.$fAlternative_Fiber5 :: [GHC.Types.Char]
[GblId, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    NO_CCS :! [GHC.Show.shows7 GHC.Types.[]];
Control.Concurrent.Fiber.$fAlternative_Fiber10 :: GHC.Base.String
[GblId, Str=] =
    \u srt:SRT:[r4O :-> Control.Concurrent.Fiber.$fAlternative_Fiber11,
                r4P :-> GHC.Show.showLitString] []
        GHC.Show.showLitString
            Control.Concurrent.Fiber.$fAlternative_Fiber11
            Control.Concurrent.Fiber.$fAlternative_Fiber5;
Control.Concurrent.Fiber.$fAlternative_Fiber9 :: [GHC.Types.Char]
[GblId, Str=, Unf=OtherCon []] =
    NO_CCS :! [GHC.Show.shows7
               Control.Concurrent.Fiber.$fAlternative_Fiber10];
Control.Concurrent.Fiber.$fAlternative_Fiber7
  :: forall a_a7SM. GHC.Types.IO a_a7SM
[GblId, Str=] =
    \u srt:SRT:[r3U :-> Control.Concurrent.Fiber.$fAlternative_Fiber8,
                r4H :-> Control.Concurrent.Fiber.$fAlternative_Fiber9,
                r5A :-> Debug.Trace.trace] []
        Debug.Trace.trace
            Control.Concurrent.Fiber.$fAlternative_Fiber9
            Control.Concurrent.Fiber.$fAlternative_Fiber8;
Control.Concurrent.Fiber.$fAlternative_Fiber30 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "v read r1"#;
Control.Concurrent.Fiber.$fAlternative_Fiber14 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "v write r2"#;
Control.Concurrent.Fiber.$fAlternative_Fiber16
  :: forall a_a7SM b_a7SN. GHC.Types.IO (a_a7SM -> b_a7SN)
[GblId, Str=b] =
    \u srt:SRT:[r3F :-> Control.Concurrent.Fiber.$fException_Empty] []
        GHC.Exception.throw
            Control.Concurrent.Fiber.$fException_Empty
            Control.Concurrent.Fiber.Empty;
Control.Concurrent.Fiber.$fAlternative_Fiber15
  :: forall a_a7SM b_a7SN. GHC.Types.IO (a_a7SM -> b_a7SN)
[GblId, Str=] =
    \u srt:SRT:[r4G :-> Control.Concurrent.Fiber.$fAlternative_Fiber16,
                r4H :-> Control.Concurrent.Fiber.$fAlternative_Fiber9,
                r5A :-> Debug.Trace.trace] []
        Debug.Trace.trace
            Control.Concurrent.Fiber.$fAlternative_Fiber9
            Control.Concurrent.Fiber.$fAlternative_Fiber16;
Control.Concurrent.Fiber.$fAlternative_Fiber27 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "f read r2"#;
Control.Concurrent.Fiber.$fAlternative_Fiber19 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "f write r1"#;
Control.Concurrent.Fiber.$fAlternative_Fiber20 :: GHC.Types.IO ()
[GblId, Str=b] =
    \u srt:SRT:[r3F :-> Control.Concurrent.Fiber.$fException_Empty] []
        GHC.Exception.throw
            Control.Concurrent.Fiber.$fException_Empty
            Control.Concurrent.Fiber.Empty;
Control.Concurrent.Fiber.$fAlternative_Fiber24 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "write"#;
Control.Concurrent.Fiber.$fAlternative_Fiber23 :: GHC.Base.String
[GblId, Str=] =
    \u srt:SRT:[r44 :-> Control.Concurrent.Fiber.$fAlternative_Fiber24,
                r4P :-> GHC.Show.showLitString] []
        GHC.Show.showLitString
            Control.Concurrent.Fiber.$fAlternative_Fiber24
            Control.Concurrent.Fiber.$fAlternative_Fiber5;
Control.Concurrent.Fiber.$fAlternative_Fiber22 :: [GHC.Types.Char]
[GblId, Str=, Unf=OtherCon []] =
    NO_CCS :! [GHC.Show.shows7
               Control.Concurrent.Fiber.$fAlternative_Fiber23];
Control.Concurrent.Fiber.$w$c<|> [InlPrag=[0]]
  :: forall a_a7MS.
     Control.Concurrent.Fiber.Fiber a_a7MS
     -> Control.Concurrent.Fiber.Fiber a_a7MS
     -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a_a7MS)
           -> GHC.Types.IO a_a7MS #)
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)))><L,U(C(C1(U)))>,
 Unf=OtherCon []] =
    \r srt:SRT:[r46 :-> Control.Concurrent.Fiber.$fAlternative_Fiber22,
                r4B :-> Control.Concurrent.Fiber.$fAlternative_Fiber21,
                r4C :-> Control.Concurrent.Fiber.$fAlternative_Fiber20,
                r5A :-> Debug.Trace.trace] [w_sIR0 w1_sIR1]
        let {
          sat_sISW [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a7MS)
               -> GHC.Types.IO a2_a7MS
          [LclId, Str=] =
              \r srt:SRT:[r46 :-> Control.Concurrent.Fiber.$fAlternative_Fiber22,
                          r4B :-> Control.Concurrent.Fiber.$fAlternative_Fiber21,
                          r4C :-> Control.Concurrent.Fiber.$fAlternative_Fiber20,
                          r5A :-> Debug.Trace.trace] [c_sIR2 eta_sIR3]
                  case newMutVar# [GHC.Types.False eta_sIR3] of _ [Occ=Dead] {
                    (#,#) ipv_sIR5 [Occ=Once] ipv1_sIR6 ->
                        let {
                          x_sIR7 [Dmd=<L,C(U(U,U))>] :: GHC.Types.IO ()
                          [LclId, Str=] =
                              \u srt:SRT:[r46 :-> Control.Concurrent.Fiber.$fAlternative_Fiber22,
                                          r5A :-> Debug.Trace.trace] []
                                  let {
                                    sat_sIRA [Occ=Once] :: GHC.Types.IO ()
                                    [LclId, Str=] =
                                        \r srt:SRT:[] [eta1_sIR8]
                                            case
                                                writeMutVar# [ipv1_sIR6 GHC.Types.True eta1_sIR8]
                                            of
                                            s2#_sIR9 [OS=OneShot]
                                            { __DEFAULT -> (#,#) [s2#_sIR9 GHC.Tuple.()];
                                            };
                                  } in 
                                    Debug.Trace.trace
                                        Control.Concurrent.Fiber.$fAlternative_Fiber22 sat_sIRA;
                        } in 
                          let {
                            sat_sISS [Occ=Once]
                              :: GHC.Exception.SomeException
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a2_a7MS #)
                            [LclId, Str=] =
                                \r srt:SRT:[r4B :-> Control.Concurrent.Fiber.$fAlternative_Fiber21,
                                            r4C :-> Control.Concurrent.Fiber.$fAlternative_Fiber20] [e1_sIRQ
                                                                                                     eta1_sIRR]
                                    case e1_sIRQ of wild_sIRS {
                                      GHC.Exception.SomeException $dException1_sIRT [Occ=Once]
                                                                  e2_sIRU [Occ=Once] ->
                                          case
                                              GHC.Exception.$p1Exception
                                                  $dException1_sIRT GHC.Prim.proxy#
                                          of
                                          _ [Occ=Dead]
                                          { Data.Typeable.Internal.TypeRep dt_sIRW [Occ=Once]
                                                                           dt1_sIRX [Occ=Once]
                                                                           _ [Occ=Dead]
                                                                           _ [Occ=Dead]
                                                                           _ [Occ=Dead] ->
                                                case
                                                    Control.Concurrent.Fiber.$fAlternative_Fiber21
                                                of
                                                _ [Occ=Dead]
                                                { Data.Typeable.Internal.TypeRep dt2_sIS2 [Occ=Once]
                                                                                 dt3_sIS3 [Occ=Once]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead]
                                                                                 _ [Occ=Dead] ->
                                                      case
                                                          eqWord64# [dt_sIRW dt2_sIS2]
                                                      of
                                                      _ [Occ=Dead]
                                                      { __DEFAULT -> raiseIO# [wild_sIRS eta1_sIRR];
                                                        1 ->
                                                            case
                                                                eqWord64# [dt1_sIRX dt3_sIS3]
                                                            of
                                                            _ [Occ=Dead]
                                                            { __DEFAULT ->
                                                                  raiseIO# [wild_sIRS eta1_sIRR];
                                                              1 ->
                                                                  case e2_sIRU of _ [Occ=Dead] {
                                                                    __DEFAULT ->
                                                                        case
                                                                            readMutVar# [ipv1_sIR6
                                                                                         eta1_sIRR]
                                                                        of
                                                                        _ [Occ=Dead]
                                                                        { (#,#) ipv2_sISB [Occ=Once]
                                                                                ipv3_sISC [Occ=Once!] ->
                                                                              case
                                                                                  ipv3_sISC
                                                                              of
                                                                              _ [Occ=Dead]
                                                                              { GHC.Types.False ->
                                                                                    let {
                                                                                      sat_sISN [Occ=Once]
                                                                                        :: GHC.Prim.Any
                                                                                      [LclId,
                                                                                       Str=] =
                                                                                          \u srt:SRT:[] []
                                                                                              case
                                                                                                  w1_sIR1
                                                                                              of
                                                                                              _ [Occ=Dead]
                                                                                              { Control.Concurrent.Fiber.Fiber ds11_sISG [Occ=Once!] ->
                                                                                                    let {
                                                                                                      sat_sISM [Occ=Once]
                                                                                                        :: Control.Concurrent.Fiber.Dyn
                                                                                                           -> GHC.Types.IO
                                                                                                                a2_a7MS
                                                                                                      [LclId,
                                                                                                       Str=] =
                                                                                                          \r srt:SRT:[] [x1_sISH
                                                                                                                         eta2_sISI]
                                                                                                              case
                                                                                                                  x_sIR7
                                                                                                                      eta2_sISI
                                                                                                              of
                                                                                                              _ [Occ=Dead]
                                                                                                              { (#,#) ipv4_sISK [Occ=Once]
                                                                                                                      _ [Occ=Dead] ->
                                                                                                                    c_sIR2
                                                                                                                        x1_sISH
                                                                                                                        ipv4_sISK;
                                                                                                              };
                                                                                                    } in 
                                                                                                      ds11_sISG
                                                                                                          sat_sISM
                                                                                                          ipv2_sISB;
                                                                                              };
                                                                                    } in 
                                                                                      case
                                                                                          __primcall  eta.runtime.stg.Stg.trampoline [sat_sISN]
                                                                                      of
                                                                                      _ [Occ=Dead]
                                                                                      { Unit# ipv4_sISP ->
                                                                                            case
                                                                                                freshStateToken# [ipv4_sISP]
                                                                                            of
                                                                                            wild4_sISQ [OS=OneShot]
                                                                                            { __DEFAULT ->
                                                                                                  (#,#) [wild4_sISQ
                                                                                                         ipv4_sISP];
                                                                                            };
                                                                                      };
                                                                                GHC.Types.True ->
                                                                                    Control.Concurrent.Fiber.$fAlternative_Fiber20;
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                                };
                                          };
                                    }; } in
                          let {
                            sat_sIRP [Occ=Once]
                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, a2_a7MS #)
                            [LclId, Str=] =
                                \r srt:SRT:[] [s_sIRB]
                                    let {
                                      sat_sIRL [Occ=Once] :: GHC.Prim.Any
                                      [LclId, Str=] =
                                          \u srt:SRT:[] []
                                              case w_sIR0 of _ [Occ=Dead] {
                                                Control.Concurrent.Fiber.Fiber ds1_sIRE [Occ=Once!] ->
                                                    let {
                                                      sat_sIRK [Occ=Once]
                                                        :: Control.Concurrent.Fiber.Dyn
                                                           -> GHC.Types.IO a2_a7MS
                                                      [LclId, Str=] =
                                                          \r srt:SRT:[] [x1_sIRF eta1_sIRG]
                                                              case
                                                                  x_sIR7 eta1_sIRG
                                                              of
                                                              _ [Occ=Dead]
                                                              { (#,#) ipv2_sIRI [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                    c_sIR2 x1_sIRF ipv2_sIRI;
                                                              };
                                                    } in  ds1_sIRE sat_sIRK s_sIRB;
                                              };
                                    } in 
                                      case
                                          __primcall  eta.runtime.stg.Stg.trampoline [sat_sIRL]
                                      of
                                      _ [Occ=Dead]
                                      { Unit# ipv2_sIRN ->
                                            case
                                                freshStateToken# [ipv2_sIRN]
                                            of
                                            wild_sIRO [OS=OneShot]
                                            { __DEFAULT -> (#,#) [wild_sIRO ipv2_sIRN];
                                            };
                                      };
                          } in 
                            case catch# [sat_sIRP sat_sISS ipv_sIR5] of _ [Occ=Dead] {
                              (#,#) ipv2_sISU [Occ=Once] ipv3_sISV [Occ=Once] ->
                                  c_sIR2 ipv3_sISV ipv2_sISU;
                            };
                  };
        } in  Unit# [sat_sISW];
Control.Concurrent.Fiber.$fAlternative_Fiber_$c<|> [InlPrag=INLINE[0]]
  :: forall a_a7MS.
     Control.Concurrent.Fiber.Fiber a_a7MS
     -> Control.Concurrent.Fiber.Fiber a_a7MS
     -> Control.Concurrent.Fiber.Fiber a_a7MS
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)))><L,U(C(C1(U)))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[r3R :-> Control.Concurrent.Fiber.$w$c<|>] [w_sISX
                                                           w1_sISY]
        case
            Control.Concurrent.Fiber.$w$c<|> w_sISX w1_sISY
        of
        _ [Occ=Dead]
        { Unit# ww1_sIT0 [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sIT0];
        };
Control.Concurrent.Fiber.$fAlternative_Fiber26 :: GHC.Base.String
[GblId, Str=] =
    \u srt:SRT:[r41 :-> Control.Concurrent.Fiber.$fAlternative_Fiber27,
                r4P :-> GHC.Show.showLitString] []
        GHC.Show.showLitString
            Control.Concurrent.Fiber.$fAlternative_Fiber27
            Control.Concurrent.Fiber.$fAlternative_Fiber5;
Control.Concurrent.Fiber.$fAlternative_Fiber25 :: [GHC.Types.Char]
[GblId, Str=, Unf=OtherCon []] =
    NO_CCS :! [GHC.Show.shows7
               Control.Concurrent.Fiber.$fAlternative_Fiber26];
Control.Concurrent.Fiber.$fAlternative_Fiber29 :: GHC.Base.String
[GblId, Str=] =
    \u srt:SRT:[r3Y :-> Control.Concurrent.Fiber.$fAlternative_Fiber30,
                r4P :-> GHC.Show.showLitString] []
        GHC.Show.showLitString
            Control.Concurrent.Fiber.$fAlternative_Fiber30
            Control.Concurrent.Fiber.$fAlternative_Fiber5;
Control.Concurrent.Fiber.$fAlternative_Fiber28 :: [GHC.Types.Char]
[GblId, Str=, Unf=OtherCon []] =
    NO_CCS :! [GHC.Show.shows7
               Control.Concurrent.Fiber.$fAlternative_Fiber29];
Control.Concurrent.Fiber.$fAlternative_Fiber18 :: GHC.Base.String
[GblId, Str=] =
    \u srt:SRT:[r4D :-> Control.Concurrent.Fiber.$fAlternative_Fiber19,
                r4P :-> GHC.Show.showLitString] []
        GHC.Show.showLitString
            Control.Concurrent.Fiber.$fAlternative_Fiber19
            Control.Concurrent.Fiber.$fAlternative_Fiber5;
Control.Concurrent.Fiber.$fAlternative_Fiber17 :: [GHC.Types.Char]
[GblId, Str=, Unf=OtherCon []] =
    NO_CCS :! [GHC.Show.shows7
               Control.Concurrent.Fiber.$fAlternative_Fiber18];
Control.Concurrent.Fiber.$fAlternative_Fiber4 :: GHC.Base.String
[GblId, Str=] =
    \u srt:SRT:[r3T :-> Control.Concurrent.Fiber.$fAlternative_Fiber6,
                r4P :-> GHC.Show.showLitString] []
        GHC.Show.showLitString
            Control.Concurrent.Fiber.$fAlternative_Fiber6
            Control.Concurrent.Fiber.$fAlternative_Fiber5;
Control.Concurrent.Fiber.$fAlternative_Fiber3 :: [GHC.Types.Char]
[GblId, Str=, Unf=OtherCon []] =
    NO_CCS :! [GHC.Show.shows7
               Control.Concurrent.Fiber.$fAlternative_Fiber4];
Control.Concurrent.Fiber.$fAlternative_Fiber13 :: GHC.Base.String
[GblId, Str=] =
    \u srt:SRT:[r4J :-> Control.Concurrent.Fiber.$fAlternative_Fiber14,
                r4P :-> GHC.Show.showLitString] []
        GHC.Show.showLitString
            Control.Concurrent.Fiber.$fAlternative_Fiber14
            Control.Concurrent.Fiber.$fAlternative_Fiber5;
Control.Concurrent.Fiber.$fAlternative_Fiber12 :: [GHC.Types.Char]
[GblId, Str=, Unf=OtherCon []] =
    NO_CCS :! [GHC.Show.shows7
               Control.Concurrent.Fiber.$fAlternative_Fiber13];
Control.Concurrent.Fiber.$w$c<*> [InlPrag=[0]]
  :: forall a_a7SK b_a7SL.
     Control.Concurrent.Fiber.Fiber (a_a7SK -> b_a7SL)
     -> Control.Concurrent.Fiber.Fiber a_a7SK
     -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a7SL)
           -> GHC.Types.IO b_a7SL #)
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)))><L,U(C(C1(U)))>,
 Unf=OtherCon []] =
    \r srt:SRT:[r3R :-> Control.Concurrent.Fiber.$w$c<|>,
                r3S :-> Control.Concurrent.Fiber.$fAlternative_Fiber7,
                r3X :-> Control.Concurrent.Fiber.$fAlternative_Fiber3,
                r40 :-> Control.Concurrent.Fiber.$fAlternative_Fiber28,
                r43 :-> Control.Concurrent.Fiber.$fAlternative_Fiber25,
                r4F :-> Control.Concurrent.Fiber.$fAlternative_Fiber17,
                r4I :-> Control.Concurrent.Fiber.$fAlternative_Fiber15,
                r4M :-> Control.Concurrent.Fiber.$fAlternative_Fiber12,
                r5A :-> Debug.Trace.trace] [w_sIT1 w1_sIT2]
        let {
          sat_sIUQ [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a7SL)
               -> GHC.Types.IO b_a7SL
          [LclId, Str=] =
              \r srt:SRT:[r3R :-> Control.Concurrent.Fiber.$w$c<|>,
                          r3S :-> Control.Concurrent.Fiber.$fAlternative_Fiber7,
                          r3X :-> Control.Concurrent.Fiber.$fAlternative_Fiber3,
                          r40 :-> Control.Concurrent.Fiber.$fAlternative_Fiber28,
                          r43 :-> Control.Concurrent.Fiber.$fAlternative_Fiber25,
                          r4F :-> Control.Concurrent.Fiber.$fAlternative_Fiber17,
                          r4I :-> Control.Concurrent.Fiber.$fAlternative_Fiber15,
                          r4M :-> Control.Concurrent.Fiber.$fAlternative_Fiber12,
                          r5A :-> Debug.Trace.trace] [c_sIT3 s_sIT4]
                  case newMutVar# [GHC.Maybe.Nothing s_sIT4] of _ [Occ=Dead] {
                    (#,#) ipv_sIT6 [Occ=Once] ipv1_sIT7 ->
                        case newMutVar# [GHC.Maybe.Nothing ipv_sIT6] of _ [Occ=Dead] {
                          (#,#) ipv2_sIT9 [Occ=Once] ipv3_sITA ->
                              let {
                                lvl1_sITB [Occ=OnceL, Dmd=<L,C(U(U,U))>]
                                  :: GHC.Types.IO (GHC.Maybe.Maybe (GHC.Prim.Any -> b_a7SL))
                                [LclId, Str=] =
                                    \u srt:SRT:[r40 :-> Control.Concurrent.Fiber.$fAlternative_Fiber28,
                                                r5A :-> Debug.Trace.trace] []
                                        let {
                                          sat_sITD [Occ=Once]
                                            :: GHC.Types.IO
                                                 (GHC.Maybe.Maybe (GHC.Prim.Any -> b_a7SL))
                                          [LclId, Str=] =
                                              \r srt:SRT:[] [eta_sITC]
                                                  readMutVar# [ipv1_sIT7 eta_sITC];
                                        } in 
                                          Debug.Trace.trace
                                              Control.Concurrent.Fiber.$fAlternative_Fiber28
                                              sat_sITD; } in
                              let {
                                lvl2_sITE [Occ=OnceL, Dmd=<L,C(U(U,U))>]
                                  :: GHC.Types.IO (GHC.Maybe.Maybe GHC.Prim.Any)
                                [LclId, Str=] =
                                    \u srt:SRT:[r43 :-> Control.Concurrent.Fiber.$fAlternative_Fiber25,
                                                r5A :-> Debug.Trace.trace] []
                                        let {
                                          sat_sITG [Occ=Once]
                                            :: GHC.Types.IO (GHC.Maybe.Maybe GHC.Prim.Any)
                                          [LclId, Str=] =
                                              \r srt:SRT:[] [eta_sITF]
                                                  readMutVar# [ipv3_sITA eta_sITF];
                                        } in 
                                          Debug.Trace.trace
                                              Control.Concurrent.Fiber.$fAlternative_Fiber25
                                              sat_sITG;
                              } in 
                                let {
                                  sat_sIUM [Occ=Once]
                                    :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a7SK)
                                       -> GHC.Types.IO a2_a7SK
                                  [LclId, Str=] =
                                      \r srt:SRT:[r3S :-> Control.Concurrent.Fiber.$fAlternative_Fiber7,
                                                  r3X :-> Control.Concurrent.Fiber.$fAlternative_Fiber3,
                                                  r4M :-> Control.Concurrent.Fiber.$fAlternative_Fiber12,
                                                  r5A :-> Debug.Trace.trace] [k_sIU2]
                                          case w1_sIT2 of _ [Occ=Dead] {
                                            Control.Concurrent.Fiber.Fiber ds2_sIU4 [Occ=Once!] ->
                                                let {
                                                  sat_sIUL [Occ=Once]
                                                    :: Control.Concurrent.Fiber.Dyn
                                                       -> GHC.Types.IO a2_a7SK
                                                  [LclId, Str=] =
                                                      \r srt:SRT:[r3S :-> Control.Concurrent.Fiber.$fAlternative_Fiber7,
                                                                  r3X :-> Control.Concurrent.Fiber.$fAlternative_Fiber3,
                                                                  r4M :-> Control.Concurrent.Fiber.$fAlternative_Fiber12,
                                                                  r5A :-> Debug.Trace.trace] [t_sIU5
                                                                                              s1_sIU6]
                                                          let {
                                                            sat_sIUA [Occ=Once] :: GHC.Types.IO ()
                                                            [LclId, Str=] =
                                                                \r srt:SRT:[] [eta_sIU7]
                                                                    let {
                                                                      sat_sIU8 [Occ=Once]
                                                                        :: GHC.Maybe.Maybe
                                                                             GHC.Prim.Any
                                                                      [LclId, Str=] =
                                                                          NO_CCS GHC.Maybe.Just! [t_sIU5];
                                                                    } in 
                                                                      case
                                                                          writeMutVar# [ipv3_sITA
                                                                                        sat_sIU8
                                                                                        eta_sIU7]
                                                                      of
                                                                      s2#_sIU9 [OS=OneShot]
                                                                      { __DEFAULT ->
                                                                            (#,#) [s2#_sIU9
                                                                                   GHC.Tuple.()];
                                                                      };
                                                          } in 
                                                            case
                                                                Debug.Trace.trace
                                                                    Control.Concurrent.Fiber.$fAlternative_Fiber12
                                                                    sat_sIUA
                                                                    s1_sIU6
                                                            of
                                                            _ [Occ=Dead]
                                                            { (#,#) ipv4_sIUC [Occ=Once]
                                                                    _ [Occ=Dead] ->
                                                                  case
                                                                      lvl1_sITB ipv4_sIUC
                                                                  of
                                                                  _ [Occ=Dead]
                                                                  { (#,#) ipv6_sIUF [Occ=Once*]
                                                                          ipv7_sIUG [Occ=Once!] ->
                                                                        case
                                                                            ipv7_sIUG
                                                                        of
                                                                        _ [Occ=Dead]
                                                                        { GHC.Maybe.Nothing ->
                                                                              Control.Concurrent.Fiber.$fAlternative_Fiber7
                                                                                  ipv6_sIUF;
                                                                          GHC.Maybe.Just g_sIUI [Occ=Once!] ->
                                                                              let {
                                                                                sat_sIUK [Occ=Once]
                                                                                  :: GHC.Types.IO
                                                                                       a2_a7SK
                                                                                [LclId, Str=] =
                                                                                    \u srt:SRT:[] []
                                                                                        let {
                                                                                          sat_sIUJ [Occ=Once]
                                                                                            :: Control.Concurrent.Fiber.Dyn
                                                                                          [LclId,
                                                                                           Str=] =
                                                                                              \u srt:SRT:[] []
                                                                                                  g_sIUI
                                                                                                      t_sIU5;
                                                                                        } in 
                                                                                          k_sIU2
                                                                                              sat_sIUJ;
                                                                              } in 
                                                                                Debug.Trace.trace
                                                                                    Control.Concurrent.Fiber.$fAlternative_Fiber3
                                                                                    sat_sIUK
                                                                                    ipv6_sIUF;
                                                                        };
                                                                  };
                                                            };
                                                } in  ds2_sIU4 sat_sIUL;
                                          }; } in
                                let {
                                  sat_sIUN [Occ=Once] :: Control.Concurrent.Fiber.Fiber b_a7SL
                                  [LclId, Str=] =
                                      NO_CCS Control.Concurrent.Fiber.Fiber! [sat_sIUM];
                                } in 
                                  let {
                                    sat_sIU0 [Occ=Once]
                                      :: (Control.Concurrent.Fiber.Dyn
                                          -> GHC.Types.IO (a2_a7SK -> b_a7SL))
                                         -> GHC.Types.IO (a2_a7SK -> b_a7SL)
                                    [LclId, Str=] =
                                        \r srt:SRT:[r4F :-> Control.Concurrent.Fiber.$fAlternative_Fiber17,
                                                    r4I :-> Control.Concurrent.Fiber.$fAlternative_Fiber15,
                                                    r5A :-> Debug.Trace.trace] [k_sITH]
                                            case w_sIT1 of _ [Occ=Dead] {
                                              Control.Concurrent.Fiber.Fiber ds2_sITJ [Occ=Once!] ->
                                                  let {
                                                    sat_sITZ [Occ=Once]
                                                      :: Control.Concurrent.Fiber.Dyn
                                                         -> GHC.Types.IO (a2_a7SK -> b_a7SL)
                                                    [LclId, Str=] =
                                                        \r srt:SRT:[r4F :-> Control.Concurrent.Fiber.$fAlternative_Fiber17,
                                                                    r4I :-> Control.Concurrent.Fiber.$fAlternative_Fiber15,
                                                                    r5A :-> Debug.Trace.trace] [g_sITK
                                                                                                s1_sITL]
                                                            let {
                                                              sat_sITP [Occ=Once] :: GHC.Types.IO ()
                                                              [LclId, Str=] =
                                                                  \r srt:SRT:[] [eta_sITM]
                                                                      let {
                                                                        sat_sITN [Occ=Once]
                                                                          :: GHC.Maybe.Maybe
                                                                               (GHC.Prim.Any
                                                                                -> b_a7SL)
                                                                        [LclId, Str=] =
                                                                            NO_CCS GHC.Maybe.Just! [g_sITK];
                                                                      } in 
                                                                        case
                                                                            writeMutVar# [ipv1_sIT7
                                                                                          sat_sITN
                                                                                          eta_sITM]
                                                                        of
                                                                        s2#_sITO [OS=OneShot]
                                                                        { __DEFAULT ->
                                                                              (#,#) [s2#_sITO
                                                                                     GHC.Tuple.()];
                                                                        };
                                                            } in 
                                                              case
                                                                  Debug.Trace.trace
                                                                      Control.Concurrent.Fiber.$fAlternative_Fiber17
                                                                      sat_sITP
                                                                      s1_sITL
                                                              of
                                                              _ [Occ=Dead]
                                                              { (#,#) ipv4_sITR [Occ=Once]
                                                                      _ [Occ=Dead] ->
                                                                    case
                                                                        lvl2_sITE ipv4_sITR
                                                                    of
                                                                    _ [Occ=Dead]
                                                                    { (#,#) ipv6_sITU [Occ=Once*]
                                                                            ipv7_sITV [Occ=Once!] ->
                                                                          case
                                                                              ipv7_sITV
                                                                          of
                                                                          _ [Occ=Dead]
                                                                          { GHC.Maybe.Nothing ->
                                                                                Control.Concurrent.Fiber.$fAlternative_Fiber15
                                                                                    ipv6_sITU;
                                                                            GHC.Maybe.Just t_sITX [Occ=Once] ->
                                                                                let {
                                                                                  sat_sITY [Occ=Once]
                                                                                    :: Control.Concurrent.Fiber.Dyn
                                                                                  [LclId, Str=] =
                                                                                      \u srt:SRT:[] []
                                                                                          g_sITK
                                                                                              t_sITX;
                                                                                } in 
                                                                                  k_sITH
                                                                                      sat_sITY
                                                                                      ipv6_sITU;
                                                                          };
                                                                    };
                                                              };
                                                  } in  ds2_sITJ sat_sITZ;
                                            }; } in
                                  let {
                                    sat_sIU1 [Occ=Once] :: Control.Concurrent.Fiber.Fiber b_a7SL
                                    [LclId, Str=] =
                                        NO_CCS Control.Concurrent.Fiber.Fiber! [sat_sIU0];
                                  } in 
                                    case
                                        Control.Concurrent.Fiber.$w$c<|> sat_sIU1 sat_sIUN
                                    of
                                    _ [Occ=Dead]
                                    { Unit# ww1_sIUP [Occ=Once!] -> ww1_sIUP c_sIT3 ipv2_sIT9;
                                    };
                        };
                  };
        } in  Unit# [sat_sIUQ];
Control.Concurrent.Fiber.$fApplicative_Fiber_$c<*> [InlPrag=INLINE[0]]
  :: forall a_a7SK b_a7SL.
     Control.Concurrent.Fiber.Fiber (a_a7SK -> b_a7SL)
     -> Control.Concurrent.Fiber.Fiber a_a7SK
     -> Control.Concurrent.Fiber.Fiber b_a7SL
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)))><L,U(C(C1(U)))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[r3P :-> Control.Concurrent.Fiber.$w$c<*>] [w_sIUR
                                                           w1_sIUS]
        case
            Control.Concurrent.Fiber.$w$c<*> w_sIUR w1_sIUS
        of
        _ [Occ=Dead]
        { Unit# ww1_sIUU [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sIUU];
        };
Control.Concurrent.Fiber.$w$cliftA2 [InlPrag=[0]]
  :: forall a_a7ZV b_a7ZW c_a7ZX.
     (a_a7ZV -> b_a7ZW -> c_a7ZX)
     -> Control.Concurrent.Fiber.Fiber a_a7ZV
     -> Control.Concurrent.Fiber.Fiber b_a7ZW
     -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO c_a7ZX)
           -> GHC.Types.IO c_a7ZX #)
[GblId,
 Arity=3,
 Str=<L,C(U)><L,U(C(C1(U)))><L,U(C(C1(U)))>,
 Unf=OtherCon []] =
    \r srt:SRT:[r3P :-> Control.Concurrent.Fiber.$w$c<*>] [w_sIUV
                                                           w1_sIUW
                                                           w2_sIUX]
        let {
          sat_sIV4 [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn
                -> GHC.Types.IO (b_a7ZW -> c_a7ZX))
               -> GHC.Types.IO (b_a7ZW -> c_a7ZX)
          [LclId, Str=] =
              \r srt:SRT:[] [c1_sIUY]
                  case w1_sIUW of _ [Occ=Dead] {
                    Control.Concurrent.Fiber.Fiber ds_sIV0 [Occ=Once!] ->
                        let {
                          sat_sIV3 [Occ=Once]
                            :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a7ZV
                          [LclId, Str=] =
                              \r srt:SRT:[] [x_sIV1]
                                  let {
                                    sat_sIV2 [Occ=Once] :: Control.Concurrent.Fiber.Dyn
                                    [LclId, Str=] =
                                        \u srt:SRT:[] [] w_sIUV x_sIV1;
                                  } in  c1_sIUY sat_sIV2;
                        } in  ds_sIV0 sat_sIV3;
                  }; } in
        let {
          sat_sIV5 [Occ=Once]
            :: Control.Concurrent.Fiber.Fiber (b_a7ZW -> c_a7ZX)
          [LclId, Str=] =
              NO_CCS Control.Concurrent.Fiber.Fiber! [sat_sIV4];
        } in  Control.Concurrent.Fiber.$w$c<*> sat_sIV5 w2_sIUX;
Control.Concurrent.Fiber.$fApplicative_Fiber_$cliftA2 [InlPrag=INLINE[0]]
  :: forall a_a7ZV b_a7ZW c_a7ZX.
     (a_a7ZV -> b_a7ZW -> c_a7ZX)
     -> Control.Concurrent.Fiber.Fiber a_a7ZV
     -> Control.Concurrent.Fiber.Fiber b_a7ZW
     -> Control.Concurrent.Fiber.Fiber c_a7ZX
[GblId,
 Arity=3,
 Str=<L,C(U)><L,U(C(C1(U)))><L,U(C(C1(U)))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[r3G :-> Control.Concurrent.Fiber.$w$cliftA2] [w_sIV6
                                                              w1_sIV7
                                                              w2_sIV8]
        case
            Control.Concurrent.Fiber.$w$cliftA2 w_sIV6 w1_sIV7 w2_sIV8
        of
        _ [Occ=Dead]
        { Unit# ww1_sIVA [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sIVA];
        };
Control.Concurrent.Fiber.$w$c<* [InlPrag=[0]]
  :: forall a_a80K b_a80L.
     Control.Concurrent.Fiber.Fiber a_a80K
     -> Control.Concurrent.Fiber.Fiber b_a80L
     -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a_a80K)
           -> GHC.Types.IO a_a80K #)
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)))><L,U(C(C1(U)))>,
 Unf=OtherCon []] =
    \r srt:SRT:[r3P :-> Control.Concurrent.Fiber.$w$c<*>] [w_sIVB
                                                           w1_sIVC]
        let {
          sat_sIVK [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn
                -> GHC.Types.IO (b_a80L -> a2_a80K))
               -> GHC.Types.IO (b_a80L -> a2_a80K)
          [LclId, Str=] =
              \r srt:SRT:[] [c_sIVD]
                  case w_sIVB of _ [Occ=Dead] {
                    Control.Concurrent.Fiber.Fiber ds_sIVF [Occ=Once!] ->
                        let {
                          sat_sIVJ [Occ=Once]
                            :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a80K
                          [LclId, Str=] =
                              \r srt:SRT:[] [x_sIVG]
                                  let {
                                    sat_sIVI [Occ=Once] :: Control.Concurrent.Fiber.Dyn
                                    [LclId, Str=] =
                                        \r srt:SRT:[] [ds1_sIVH] x_sIVG;
                                  } in  c_sIVD sat_sIVI;
                        } in  ds_sIVF sat_sIVJ;
                  }; } in
        let {
          sat_sIVL [Occ=Once]
            :: Control.Concurrent.Fiber.Fiber (b_a80L -> a2_a80K)
          [LclId, Str=] =
              NO_CCS Control.Concurrent.Fiber.Fiber! [sat_sIVK];
        } in  Control.Concurrent.Fiber.$w$c<*> sat_sIVL w1_sIVC;
Control.Concurrent.Fiber.$fApplicative_Fiber_$c<* [InlPrag=INLINE[0]]
  :: forall a_a80K b_a80L.
     Control.Concurrent.Fiber.Fiber a_a80K
     -> Control.Concurrent.Fiber.Fiber b_a80L
     -> Control.Concurrent.Fiber.Fiber a_a80K
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)))><L,U(C(C1(U)))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[r3H :-> Control.Concurrent.Fiber.$w$c<*] [w_sIVM
                                                          w1_sIVN]
        case
            Control.Concurrent.Fiber.$w$c<* w_sIVM w1_sIVN
        of
        _ [Occ=Dead]
        { Unit# ww1_sIVP [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sIVP];
        };
Control.Concurrent.Fiber.$w$c*> [InlPrag=[0]]
  :: forall a_a809 b_a80A.
     Control.Concurrent.Fiber.Fiber a_a809
     -> Control.Concurrent.Fiber.Fiber b_a80A
     -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a80A)
           -> GHC.Types.IO b_a80A #)
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)))><L,U(C(C1(U)))>,
 Unf=OtherCon []] =
    \r srt:SRT:[r3P :-> Control.Concurrent.Fiber.$w$c<*>] [w_sIVQ
                                                           w1_sIVR]
        let {
          sat_sIVY [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn
                -> GHC.Types.IO (b_a80A -> b_a80A))
               -> GHC.Types.IO (b_a80A -> b_a80A)
          [LclId, Str=] =
              \r srt:SRT:[] [c_sIVS]
                  case w_sIVQ of _ [Occ=Dead] {
                    Control.Concurrent.Fiber.Fiber ds_sIVU [Occ=Once!] ->
                        let {
                          lvl1_sIVV [Occ=OnceL] :: GHC.Types.IO (b_a80A -> b_a80A)
                          [LclId, Str=] =
                              \u srt:SRT:[] [] c_sIVS GHC.Base.id;
                        } in 
                          let {
                            sat_sIVX [Occ=Once]
                              :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a809
                            [LclId, Str=] =
                                \r srt:SRT:[] [x_sIVW] lvl1_sIVV;
                          } in  ds_sIVU sat_sIVX;
                  }; } in
        let {
          sat_sIVZ [Occ=Once]
            :: Control.Concurrent.Fiber.Fiber (b_a80A -> b_a80A)
          [LclId, Str=] =
              NO_CCS Control.Concurrent.Fiber.Fiber! [sat_sIVY];
        } in  Control.Concurrent.Fiber.$w$c<*> sat_sIVZ w1_sIVR;
Control.Concurrent.Fiber.$fApplicative_Fiber_$c*> [InlPrag=INLINE[0]]
  :: forall a_a809 b_a80A.
     Control.Concurrent.Fiber.Fiber a_a809
     -> Control.Concurrent.Fiber.Fiber b_a80A
     -> Control.Concurrent.Fiber.Fiber b_a80A
[GblId,
 Arity=2,
 Str=<L,U(C(C1(U)))><L,U(C(C1(U)))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[r3I :-> Control.Concurrent.Fiber.$w$c*>] [w_sIW0
                                                          w1_sIW1]
        case
            Control.Concurrent.Fiber.$w$c*> w_sIW0 w1_sIW1
        of
        _ [Occ=Dead]
        { Unit# ww1_sIW3 [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sIW3];
        };
Control.Concurrent.Fiber.$fApplicative_Fiber [InlPrag=[ALWAYS] CONLIKE]
  :: GHC.Base.Applicative Control.Concurrent.Fiber.Fiber
[GblId[DFunId], Str=m, Unf=OtherCon []] =
    NO_CCS GHC.Base.D:Applicative! [Control.Concurrent.Fiber.$fFunctor_Fiber
                                    Control.Concurrent.Fiber.$fApplicative_Fiber_$cpure
                                    Control.Concurrent.Fiber.$fApplicative_Fiber_$c<*>
                                    Control.Concurrent.Fiber.$fApplicative_Fiber_$cliftA2
                                    Control.Concurrent.Fiber.$fApplicative_Fiber_$c*>
                                    Control.Concurrent.Fiber.$fApplicative_Fiber_$c<*];
a1_rIIM
  :: forall a1_a9VY.
     [GHC.Types.Char] -> Control.Concurrent.Fiber.Fiber a1_a9VY
[GblId, Arity=1, Str=<L,U>b, Unf=OtherCon []] =
    \r srt:SRT:[r2Q :-> GHC.Err.errorWithoutStackTrace] [eta_sIW4]
        GHC.Err.errorWithoutStackTrace eta_sIW4;
Control.Concurrent.Fiber.$fMonad_Fiber_$c>> [InlPrag=INLINE (sat-args=2)]
  :: forall a_a5S2 b_a5S3.
     Control.Concurrent.Fiber.Fiber a_a5S2
     -> Control.Concurrent.Fiber.Fiber b_a5S3
     -> Control.Concurrent.Fiber.Fiber b_a5S3
[GblId, Arity=2, Str=<L,U><L,U>, Unf=OtherCon []] =
    \r srt:SRT:[r2W :-> Control.Concurrent.Fiber.$fMonad_Fiber] [eta_sIW5
                                                                 eta1_sIW6]
        let {
          sat_sIW8 [Occ=Once]
            :: a2_a5S2 -> Control.Concurrent.Fiber.Fiber b_a5S3
          [LclId, Str=] =
              \r srt:SRT:[] [ds_sIW7] eta1_sIW6;
        } in 
          GHC.Base.>>=
              Control.Concurrent.Fiber.$fMonad_Fiber eta_sIW5 sat_sIW8;
Control.Concurrent.Fiber.$fMonad_Fiber [InlPrag=[ALWAYS] CONLIKE,
                                        Occ=LoopBreaker!]
  :: GHC.Base.Monad Control.Concurrent.Fiber.Fiber
[GblId[DFunId], Str=m, Unf=OtherCon []] =
    NO_CCS GHC.Base.D:Monad! [Control.Concurrent.Fiber.$fApplicative_Fiber
                              Control.Concurrent.Fiber.$fMonad_Fiber_$c>>=
                              Control.Concurrent.Fiber.$fMonad_Fiber_$c>>
                              Control.Concurrent.Fiber.$fApplicative_Fiber_$cpure
                              a1_rIIM];
Control.Concurrent.Fiber.$fAlternative_Fiber2
  :: forall a1_a9WB.
     (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO [a1_a9WB])
     -> GHC.Types.IO [a1_a9WB]
[GblId, Arity=1, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    \r srt:SRT:[] [ds_sIW9] ds_sIW9 GHC.Types.[];
Control.Concurrent.Fiber.$fAlternative_Fiber1
  :: forall a1_a9WB. Control.Concurrent.Fiber.Fiber [a1_a9WB]
[GblId, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    NO_CCS Control.Concurrent.Fiber.Fiber! [Control.Concurrent.Fiber.$fAlternative_Fiber2];
Control.Concurrent.Fiber.$fAlternative_Fiber_$csome
  :: forall a_a7QV.
     Control.Concurrent.Fiber.Fiber a_a7QV
     -> Control.Concurrent.Fiber.Fiber [a_a7QV]
[GblId, Arity=1, Str=<L,U(C(C1(U)))>, Unf=OtherCon []] =
    \r srt:SRT:[r3P :-> Control.Concurrent.Fiber.$w$c<*>,
                r3R :-> Control.Concurrent.Fiber.$w$c<|>] [eta_sIWA]
        let {
          some_v_sIWB [Occ=LoopBreaker]
            :: Control.Concurrent.Fiber.Fiber [a2_a9WB]
          [LclId, Str=] =
              \u srt:SRT:[r3P :-> Control.Concurrent.Fiber.$w$c<*>,
                          r3R :-> Control.Concurrent.Fiber.$w$c<|>] []
                  let {
                    sat_sIWM [Occ=Once, Dmd=<L,U(C(C1(U)))>]
                      :: Control.Concurrent.Fiber.Fiber [a2_a9WB]
                    [LclId, Str=] =
                        \u srt:SRT:[r3R :-> Control.Concurrent.Fiber.$w$c<|>] []
                            case
                                Control.Concurrent.Fiber.$w$c<|>
                                    some_v_sIWB Control.Concurrent.Fiber.$fAlternative_Fiber1
                            of
                            _ [Occ=Dead]
                            { Unit# ww1_sIWL [Occ=Once] ->
                                  Control.Concurrent.Fiber.Fiber [ww1_sIWL];
                            };
                  } in 
                    let {
                      sat_sIWI
                        :: (Control.Concurrent.Fiber.Dyn
                            -> GHC.Types.IO ([a2_a9WB] -> [a2_a9WB]))
                           -> GHC.Types.IO ([a2_a9WB] -> [a2_a9WB])
                      [LclId, Str=] =
                          \r srt:SRT:[] [c_sIWC]
                              case eta_sIWA of _ [Occ=Dead] {
                                Control.Concurrent.Fiber.Fiber ds_sIWE [Occ=Once!] ->
                                    let {
                                      sat_sIWH [Occ=Once]
                                        :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a9WB
                                      [LclId, Str=] =
                                          \r srt:SRT:[] [x_sIWF]
                                              let {
                                                sat_sIWG [Occ=Once] :: Control.Concurrent.Fiber.Dyn
                                                [LclId, Str=] =
                                                    \u srt:SRT:[] [] GHC.Types.: x_sIWF;
                                              } in  c_sIWC sat_sIWG;
                                    } in  ds_sIWE sat_sIWH;
                              }; } in
                    let {
                      sat_sIWJ [Occ=Once]
                        :: Control.Concurrent.Fiber.Fiber ([a2_a9WB] -> [a2_a9WB])
                      [LclId, Str=] =
                          NO_CCS Control.Concurrent.Fiber.Fiber! [sat_sIWI];
                    } in 
                      case
                          Control.Concurrent.Fiber.$w$c<*> sat_sIWJ sat_sIWM
                      of
                      _ [Occ=Dead]
                      { Unit# ww1_sIWO [Occ=Once] ->
                            Control.Concurrent.Fiber.Fiber [ww1_sIWO];
                      };
        } in  some_v_sIWB;
Control.Concurrent.Fiber.$fAlternative_Fiber_$cmany
  :: forall a_a7R3.
     Control.Concurrent.Fiber.Fiber a_a7R3
     -> Control.Concurrent.Fiber.Fiber [a_a7R3]
[GblId, Arity=1, Str=<L,U(C(C1(U)))>, Unf=OtherCon []] =
    \r srt:SRT:[r3P :-> Control.Concurrent.Fiber.$w$c<*>,
                r3R :-> Control.Concurrent.Fiber.$w$c<|>] [eta_sIWP]
        let {
          many_v_sIWQ [Occ=LoopBreaker]
            :: Control.Concurrent.Fiber.Fiber [a2_a9WH]
          [LclId, Str=] =
              \u srt:SRT:[r3P :-> Control.Concurrent.Fiber.$w$c<*>,
                          r3R :-> Control.Concurrent.Fiber.$w$c<|>] []
                  let {
                    sat_sIX1 [Occ=Once, Dmd=<L,U(C(C1(U)))>]
                      :: Control.Concurrent.Fiber.Fiber [a2_a9WH]
                    [LclId, Str=] =
                        \u srt:SRT:[r3P :-> Control.Concurrent.Fiber.$w$c<*>] []
                            let {
                              sat_sIWX
                                :: (Control.Concurrent.Fiber.Dyn
                                    -> GHC.Types.IO ([a2_a9WH] -> [a2_a9WH]))
                                   -> GHC.Types.IO ([a2_a9WH] -> [a2_a9WH])
                              [LclId, Str=] =
                                  \r srt:SRT:[] [c_sIWR]
                                      case eta_sIWP of _ [Occ=Dead] {
                                        Control.Concurrent.Fiber.Fiber ds_sIWT [Occ=Once!] ->
                                            let {
                                              sat_sIWW [Occ=Once]
                                                :: Control.Concurrent.Fiber.Dyn
                                                   -> GHC.Types.IO a2_a9WH
                                              [LclId, Str=] =
                                                  \r srt:SRT:[] [x_sIWU]
                                                      let {
                                                        sat_sIWV [Occ=Once]
                                                          :: Control.Concurrent.Fiber.Dyn
                                                        [LclId, Str=] =
                                                            \u srt:SRT:[] [] GHC.Types.: x_sIWU;
                                                      } in  c_sIWR sat_sIWV;
                                            } in  ds_sIWT sat_sIWW;
                                      }; } in
                            let {
                              sat_sIWY [Occ=Once]
                                :: Control.Concurrent.Fiber.Fiber ([a2_a9WH] -> [a2_a9WH])
                              [LclId, Str=] =
                                  NO_CCS Control.Concurrent.Fiber.Fiber! [sat_sIWX];
                            } in 
                              case
                                  Control.Concurrent.Fiber.$w$c<*> sat_sIWY many_v_sIWQ
                              of
                              _ [Occ=Dead]
                              { Unit# ww1_sIX0 [Occ=Once] ->
                                    Control.Concurrent.Fiber.Fiber [ww1_sIX0];
                              };
                  } in 
                    case
                        Control.Concurrent.Fiber.$w$c<|>
                            sat_sIX1 Control.Concurrent.Fiber.$fAlternative_Fiber1
                    of
                    _ [Occ=Dead]
                    { Unit# ww1_sIX3 [Occ=Once] ->
                          Control.Concurrent.Fiber.Fiber [ww1_sIX3];
                    };
        } in  many_v_sIWQ;
Control.Concurrent.Fiber.$fAlternative_Fiber [InlPrag=[ALWAYS] CONLIKE]
  :: GHC.Base.Alternative Control.Concurrent.Fiber.Fiber
[GblId[DFunId], Str=m, Unf=OtherCon []] =
    NO_CCS GHC.Base.D:Alternative! [Control.Concurrent.Fiber.$fApplicative_Fiber
                                    Control.Concurrent.Fiber.$fAlternative_Fiber_$cempty
                                    Control.Concurrent.Fiber.$fAlternative_Fiber_$c<|>
                                    Control.Concurrent.Fiber.$fAlternative_Fiber_$csome
                                    Control.Concurrent.Fiber.$fAlternative_Fiber_$cmany];
Control.Concurrent.Fiber.$fMonadIO_Fiber [InlPrag=[ALWAYS] CONLIKE]
  :: Control.Monad.IO.Class.MonadIO Control.Concurrent.Fiber.Fiber
[GblId[DFunId], Str=m, Unf=OtherCon []] =
    NO_CCS Control.Monad.IO.Class.D:MonadIO! [Control.Concurrent.Fiber.$fMonad_Fiber
                                              Control.Concurrent.Fiber.$fMonadIO_Fiber_$cliftIO];
Control.Concurrent.Fiber.$dmatEnd
  :: forall (m_a3JF :: * -> *).
     Control.Concurrent.Fiber.AdditionalOperators m_a3JF =>
     forall a_a3JO b_a3JP.
     m_a3JF a_a3JO -> m_a3JF b_a3JP -> m_a3JF a_a3JO
[GblId, Arity=1, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B1] Control.Concurrent.Fiber.<*** eta_B1;
Control.Concurrent.Fiber.$dmatEnd'
  :: forall (m_a3JF :: * -> *).
     Control.Concurrent.Fiber.AdditionalOperators m_a3JF =>
     forall a_a3JK b_a3JL.
     m_a3JF a_a3JK -> m_a3JF b_a3JL -> m_a3JF a_a3JK
[GblId, Arity=1, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B1] Control.Concurrent.Fiber.<** eta_B1;
Control.Concurrent.Fiber.$fAdditionalOperators_Fiber_$c**> [InlPrag=INLINE[0]]
  :: forall a_a3JG b_a3JH.
     Control.Concurrent.Fiber.Fiber a_a3JG
     -> Control.Concurrent.Fiber.Fiber b_a3JH
     -> Control.Concurrent.Fiber.Fiber b_a3JH
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(C(U))><L,U(C(U))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [w_sIX4 w1_sIX5]
        let {
          sat_sIXE [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a3JH)
               -> GHC.Types.IO b_a3JH
          [LclId, Str=] =
              \r srt:SRT:[] [c_sIX6]
                  case w_sIX4 of _ [Occ=Dead] {
                    Control.Concurrent.Fiber.Fiber ds_sIX8 [Occ=Once!] ->
                        let {
                          lvl1_sIX9 [Occ=OnceL] :: GHC.Types.IO a2_a3JG
                          [LclId, Str=] =
                              \u srt:SRT:[] []
                                  case w1_sIX5 of _ [Occ=Dead] {
                                    Control.Concurrent.Fiber.Fiber ds1_sIXB [Occ=Once!] ->
                                        ds1_sIXB c_sIX6;
                                  };
                        } in 
                          let {
                            sat_sIXD [Occ=Once]
                              :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a3JG
                            [LclId, Str=] =
                                \r srt:SRT:[] [ds1_sIXC] lvl1_sIX9;
                          } in  ds_sIX8 sat_sIXD;
                  };
        } in  Control.Concurrent.Fiber.Fiber [sat_sIXE];
Control.Concurrent.Fiber.$fAdditionalOperators_Fiber2 [InlPrag=INLINE[0]]
  :: forall a_a7JU b_a7JV.
     Control.Concurrent.Fiber.Fiber a_a7JU
     -> Control.Concurrent.Fiber.Fiber b_a7JV
     -> Control.Concurrent.Fiber.Fiber b_a7JV
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(C(U))><L,U(C(U))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [w_sIXF w1_sIXG]
        let {
          sat_sIXR [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a7JV)
               -> GHC.Types.IO b_a7JV
          [LclId, Str=] =
              \r srt:SRT:[] [k_sIXH]
                  case w_sIXF of _ [Occ=Dead] {
                    Control.Concurrent.Fiber.Fiber ds_sIXJ [Occ=Once!] ->
                        let {
                          sat_sIXQ [Occ=Once]
                            :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a7JU
                          [LclId, Str=] =
                              \r srt:SRT:[] [x_sIXK]
                                  case w1_sIXG of _ [Occ=Dead] {
                                    Control.Concurrent.Fiber.Fiber ds1_sIXM [Occ=Once!] ->
                                        let {
                                          lvl1_sIXN [Occ=OnceL] :: GHC.Types.IO b_a7JV
                                          [LclId, Str=] =
                                              \u srt:SRT:[] [] k_sIXH x_sIXK;
                                        } in 
                                          let {
                                            sat_sIXP [Occ=Once]
                                              :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a7JV
                                            [LclId, Str=] =
                                                \r srt:SRT:[] [ds2_sIXO] lvl1_sIXN;
                                          } in  ds1_sIXM sat_sIXP;
                                  };
                        } in  ds_sIXJ sat_sIXQ;
                  };
        } in  Control.Concurrent.Fiber.Fiber [sat_sIXR];
Control.Concurrent.Fiber.$fAdditionalOperators_Fiber_$c<**
  :: forall a_a3JI b_a3JJ.
     Control.Concurrent.Fiber.Fiber a_a3JI
     -> Control.Concurrent.Fiber.Fiber b_a3JJ
     -> Control.Concurrent.Fiber.Fiber a_a3JI
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(C(U))><L,U(C(U))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B2 eta_B1]
        Control.Concurrent.Fiber.$fAdditionalOperators_Fiber2
            eta_B2 eta_B1;
Control.Concurrent.Fiber.$fAdditionalOperators_Fiber1 [InlPrag=INLINE[0]]
  :: forall a_a7KS b_a7KT.
     Control.Concurrent.Fiber.Fiber a_a7KS
     -> Control.Concurrent.Fiber.Fiber b_a7KT
     -> Control.Concurrent.Fiber.Fiber b_a7KT
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(C(U))><L,U(C(U))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [w_sIXS w1_sIXT]
        let {
          sat_sIY4 [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a7KT)
               -> GHC.Types.IO b_a7KT
          [LclId, Str=] =
              \r srt:SRT:[] [k_sIXU]
                  case w_sIXS of _ [Occ=Dead] {
                    Control.Concurrent.Fiber.Fiber ds_sIXW [Occ=Once!] ->
                        let {
                          sat_sIY3 [Occ=Once]
                            :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a7KS
                          [LclId, Str=] =
                              \r srt:SRT:[] [x_sIXX]
                                  case w1_sIXT of _ [Occ=Dead] {
                                    Control.Concurrent.Fiber.Fiber ds1_sIXZ [Occ=Once!] ->
                                        let {
                                          lvl1_sIY0 [Occ=OnceL] :: GHC.Types.IO b_a7KT
                                          [LclId, Str=] =
                                              \u srt:SRT:[] [] k_sIXU x_sIXX;
                                        } in 
                                          let {
                                            sat_sIY2 [Occ=Once]
                                              :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a7KT
                                            [LclId, Str=] =
                                                \r srt:SRT:[] [ds2_sIY1] lvl1_sIY0;
                                          } in  ds1_sIXZ sat_sIY2;
                                  };
                        } in  ds_sIXW sat_sIY3;
                  };
        } in  Control.Concurrent.Fiber.Fiber [sat_sIY4];
Control.Concurrent.Fiber.$fAdditionalOperators_Fiber_$c<***
  :: forall a_a3JM b_a3JN.
     Control.Concurrent.Fiber.Fiber a_a3JM
     -> Control.Concurrent.Fiber.Fiber b_a3JN
     -> Control.Concurrent.Fiber.Fiber a_a3JM
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(C(U))><L,U(C(U))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B2 eta_B1]
        Control.Concurrent.Fiber.$fAdditionalOperators_Fiber1
            eta_B2 eta_B1;
Control.Concurrent.Fiber.$fAdditionalOperators_Fiber [InlPrag=[ALWAYS] CONLIKE]
  :: Control.Concurrent.Fiber.AdditionalOperators
       Control.Concurrent.Fiber.Fiber
[GblId[DFunId], Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    NO_CCS Control.Concurrent.Fiber.D:AdditionalOperators! [Control.Concurrent.Fiber.$fAdditionalOperators_Fiber_$c**>
                                                            Control.Concurrent.Fiber.$fAdditionalOperators_Fiber2
                                                            Control.Concurrent.Fiber.$fAdditionalOperators_Fiber2
                                                            Control.Concurrent.Fiber.$fAdditionalOperators_Fiber1
                                                            Control.Concurrent.Fiber.$fAdditionalOperators_Fiber1];
Control.Concurrent.Fiber.no1
  :: forall a_a5TW.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.MVar.MVar a_a5TW #)
[GblId, Arity=1, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    \r srt:SRT:[] [s_sIY5]
        case noDuplicate# [s_sIY5] of s'_sIY6 [OS=OneShot] {
          __DEFAULT ->
              case newMVar# [s'_sIY6] of _ [Occ=Dead] {
                (#,#) ipv_sIY8 [Occ=Once] ipv1_sIY9 [Occ=Once] ->
                    let {
                      sat_sIYA [Occ=Once] :: GHC.MVar.MVar a2_a5TW
                      [LclId, Str=] =
                          NO_CCS GHC.MVar.MVar! [ipv1_sIY9];
                    } in  (#,#) [ipv_sIY8 sat_sIYA];
              };
        };
Control.Concurrent.Fiber.no :: forall a_a5TU. GHC.MVar.MVar a_a5TU
[GblId, Str=] =
    \u srt:SRT:[] []
        case
            Control.Concurrent.Fiber.no1 GHC.Prim.realWorld#
        of
        _ [Occ=Dead]
        { (#,#) _ [Occ=Dead] ipv1_sIYD [Occ=Once] -> ipv1_sIYD;
        };
Control.Concurrent.Fiber.mvline1
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Conc.Sync.TVar [GHC.Types.Char] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    \r srt:SRT:[] [s_sIYE]
        case noDuplicate# [s_sIYE] of s'_sIYF [OS=OneShot] {
          __DEFAULT ->
              case newTVar# [GHC.Types.[] s'_sIYF] of _ [Occ=Dead] {
                (#,#) ipv_sIYH [Occ=Once] ipv1_sIYI [Occ=Once] ->
                    let {
                      sat_sIYJ [Occ=Once] :: GHC.Conc.Sync.TVar [GHC.Types.Char]
                      [LclId, Str=] =
                          NO_CCS GHC.Conc.Sync.TVar! [ipv1_sIYI];
                    } in  (#,#) [ipv_sIYH sat_sIYJ];
              };
        };
Control.Concurrent.Fiber.mvline
  :: GHC.Conc.Sync.TVar [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] []
        case
            Control.Concurrent.Fiber.mvline1 GHC.Prim.realWorld#
        of
        _ [Occ=Dead]
        { (#,#) _ [Occ=Dead] ipv1_sIYM [Occ=Once] -> ipv1_sIYM;
        };
Control.Concurrent.Fiber.inputLoop1 [Occ=LoopBreaker]
  :: forall b_a5UV.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a5UV #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    \r srt:SRT:[r1L :-> Control.Concurrent.Fiber.inputLoop1,
                r69 :-> Control.Concurrent.Fiber.mvline,
                r3S7 :-> GHC.IO.Handle.Text.hGetLine2,
                r3S8 :-> GHC.IO.Handle.Text.hGetLine4,
                r3SF :-> GHC.IO.Handle.Internals.wantReadableHandle_1,
                r3UB :-> GHC.IO.Handle.FD.stdin] [s_sIYN]
        case
            GHC.IO.Handle.Internals.wantReadableHandle_1
                GHC.IO.Handle.Text.hGetLine4
                GHC.IO.Handle.FD.stdin
                GHC.IO.Handle.Text.hGetLine2
                s_sIYN
        of
        _ [Occ=Dead]
        { (#,#) ipv_sIYP [Occ=Once] ipv1_sIYQ [Occ=Once] ->
              let {
                sat_sIYR [Occ=Once]
                  :: GHC.Prim.State# GHC.Prim.RealWorld
                     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                [LclId, Str=] =
                    \r srt:SRT:[r69 :-> Control.Concurrent.Fiber.mvline] [eta_B1]
                        GHC.Conc.Sync.writeTVar1
                            Control.Concurrent.Fiber.mvline ipv1_sIYQ eta_B1;
              } in 
                case atomically# [sat_sIYR ipv_sIYP] of _ [Occ=Dead] {
                  (#,#) ipv2_sIYT [Occ=Once] _ [Occ=Dead] ->
                      Control.Concurrent.Fiber.inputLoop1 ipv2_sIYT;
                };
        };
Control.Concurrent.Fiber.inputLoop
  :: forall b_a5UT. GHC.Types.IO b_a5UT
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    \r srt:SRT:[r1L :-> Control.Concurrent.Fiber.inputLoop1] [eta_B1]
        Control.Concurrent.Fiber.inputLoop1 eta_B1;
Control.Concurrent.Fiber.rcb1
  :: forall t_a5QN.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IORef.IORef [t_a5QN] #)
[GblId, Arity=1, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    \r srt:SRT:[] [s_sIYV]
        case noDuplicate# [s_sIYV] of s'_sIYW [OS=OneShot] {
          __DEFAULT ->
              case newMutVar# [GHC.Types.[] s'_sIYW] of _ [Occ=Dead] {
                (#,#) ipv_sIYY [Occ=Once] ipv1_sIYZ [Occ=Once] ->
                    let {
                      sat_sIZ0 [Occ=Once] :: GHC.IORef.IORef [t_a5QN]
                      [LclId, Str=] =
                          NO_CCS GHC.STRef.STRef! [ipv1_sIYZ];
                    } in  (#,#) [ipv_sIYY sat_sIZ0];
              };
        };
Control.Concurrent.Fiber.rcb
  :: forall t_a5QL. GHC.IORef.IORef [t_a5QL]
[GblId, Str=] =
    \u srt:SRT:[] []
        case
            Control.Concurrent.Fiber.rcb1 GHC.Prim.realWorld#
        of
        _ [Occ=Dead]
        { (#,#) _ [Occ=Dead] ipv1_sIZ3 [Occ=Once] -> ipv1_sIZ3;
        };
Control.Concurrent.Fiber.setCallback1
  :: (GHC.Base.String -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    \r srt:SRT:[r66 :-> Control.Concurrent.Fiber.rcb] [cb_sIZ4
                                                       eta_sIZ5]
        case Control.Concurrent.Fiber.rcb of _ [Occ=Dead] {
          GHC.STRef.STRef r#_sIZ7 [Occ=Once] ->
              let {
                sat_sIZB [Occ=Once]
                  :: [GHC.Base.String -> GHC.Types.IO ()]
                     -> ([GHC.Base.String -> GHC.Types.IO ()], ())
                [LclId, Str=] =
                    \r srt:SRT:[] [cbs_sIZ8]
                        let {
                          sat_sIZA [Occ=Once] :: [GHC.Base.String -> GHC.Types.IO ()]
                          [LclId, Str=] =
                              \u srt:SRT:[] []
                                  let {
                                    sat_sIZ9 [Occ=Once] :: [GHC.Base.String -> GHC.Types.IO ()]
                                    [LclId, Str=] =
                                        NO_CCS :! [cb_sIZ4 cbs_sIZ8];
                                  } in  GHC.List.reverse1 sat_sIZ9 GHC.Types.[];
                        } in  (,) [sat_sIZA GHC.Tuple.()];
              } in  atomicModifyMutVar# [r#_sIZ7 sat_sIZB eta_sIZ5];
        };
Control.Concurrent.Fiber.setCallback
  :: (GHC.Base.String -> GHC.Types.IO ()) -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U><S,U>, Unf=OtherCon []] =
    \r srt:SRT:[r18 :-> Control.Concurrent.Fiber.setCallback1] [eta_B2
                                                                eta_B1]
        Control.Concurrent.Fiber.setCallback1 eta_B2 eta_B1;
Control.Concurrent.Fiber.reactLoop1 [Occ=LoopBreaker]
  :: forall b_a5T3.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a5T3 #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    \r srt:SRT:[r19 :-> Control.Concurrent.Fiber.reactLoop1,
                r66 :-> Control.Concurrent.Fiber.rcb,
                r3S7 :-> GHC.IO.Handle.Text.hGetLine2,
                r3S8 :-> GHC.IO.Handle.Text.hGetLine4,
                r3SF :-> GHC.IO.Handle.Internals.wantReadableHandle_1,
                r3UB :-> GHC.IO.Handle.FD.stdin] [s_sIZC]
        case
            GHC.IO.Handle.Internals.wantReadableHandle_1
                GHC.IO.Handle.Text.hGetLine4
                GHC.IO.Handle.FD.stdin
                GHC.IO.Handle.Text.hGetLine2
                s_sIZC
        of
        _ [Occ=Dead]
        { (#,#) ipv_sIZE [Occ=Once] ipv1_sIZF [Occ=OnceL] ->
              case Control.Concurrent.Fiber.rcb of _ [Occ=Dead] {
                GHC.STRef.STRef var#_sIZH [Occ=Once] ->
                    case readMutVar# [var#_sIZH ipv_sIZE] of _ [Occ=Dead] {
                      (#,#) ipv2_sIZJ [Occ=Once] ipv3_sIZK [Occ=Once] ->
                          let {
                            a2_sIZL [Occ=LoopBreaker]
                              :: [GHC.Base.String -> GHC.Types.IO GHC.Prim.Any]
                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Prim.Any] #)
                            [LclId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
                                sat-only \r srt:SRT:[] [ds_sIZM eta_sIZN]
                                    case ds_sIZM of _ [Occ=Dead] {
                                      [] -> (#,#) [eta_sIZN GHC.Types.[]];
                                      : y_sIZP [Occ=Once!] ys_sIZQ [Occ=Once] ->
                                          case y_sIZP ipv1_sIZF eta_sIZN of _ [Occ=Dead] {
                                            (#,#) ipv4_sIZS [Occ=Once] ipv5_sIZT [Occ=Once] ->
                                                case a2_sIZL ys_sIZQ ipv4_sIZS of _ [Occ=Dead] {
                                                  (#,#) ipv6_sIZV [Occ=Once] ipv7_sIZW [Occ=Once] ->
                                                      let {
                                                        sat_sIZX [Occ=Once] :: [GHC.Prim.Any]
                                                        [LclId, Str=] =
                                                            NO_CCS :! [ipv5_sIZT ipv7_sIZW];
                                                      } in  (#,#) [ipv6_sIZV sat_sIZX];
                                                };
                                          };
                                    };
                          } in 
                            case a2_sIZL ipv3_sIZK ipv2_sIZJ of _ [Occ=Dead] {
                              (#,#) ipv4_sIZZ [Occ=Once] _ [Occ=Dead] ->
                                  Control.Concurrent.Fiber.reactLoop1 ipv4_sIZZ;
                            };
                    };
              };
        };
Control.Concurrent.Fiber.reactLoop
  :: forall b_a5T1. GHC.Types.IO b_a5T1
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    \r srt:SRT:[r19 :-> Control.Concurrent.Fiber.reactLoop1] [eta_B1]
        Control.Concurrent.Fiber.reactLoop1 eta_B1;
Control.Concurrent.Fiber.mexit
  :: forall a_a5PZ. GHC.MVar.MVar a_a5PZ
[GblId, Str=] =
    \u srt:SRT:[r68 :-> Control.Concurrent.Fiber.no] []
        Control.Concurrent.Fiber.no;
Control.Concurrent.Fiber.onNothing
  :: forall (m_a3P9 :: * -> *) b_a3PA.
     GHC.Base.Monad m_a3P9 =>
     m_a3P9 (GHC.Maybe.Maybe b_a3PA) -> m_a3P9 b_a3PA -> m_a3P9 b_a3PA
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LC(C(S))LLL),U(A,1*C1(C1(U)),A,C(U),A)><L,U><L,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [$dMonad_sJ01 iox_sJ02 iox'_sJ03]
        let {
          sat_sJ07 [Occ=Once] :: GHC.Maybe.Maybe b_a5LJ -> m_a5LI b_a5LJ
          [LclId, Str=] =
              \r srt:SRT:[] [mx_sJ04]
                  case mx_sJ04 of _ [Occ=Dead] {
                    GHC.Maybe.Nothing -> iox'_sJ03;
                    GHC.Maybe.Just x_sJ06 [Occ=Once] ->
                        GHC.Base.return $dMonad_sJ01 x_sJ06;
                  };
        } in  GHC.Base.>>= $dMonad_sJ01 iox_sJ02 sat_sJ07;
Control.Concurrent.Fiber.yieldFiber#
  :: forall s_a5DC[sk].
     GHC.Prim.Int#
     -> GHC.Prim.Any
     -> GHC.Prim.State# s_a5DC[sk]
     -> GHC.Prim.State# s_a5DC[sk]
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B3 eta_B2 eta_B1]
        __primcall  eta.fibers.PrimOps.yieldFiber [eta_B3 eta_B2 eta_B1];
Control.Concurrent.Fiber.forkFiber
  :: forall (m_a3QA :: * -> *).
     Control.Monad.IO.Class.MonadIO m_a3QA =>
     Control.Concurrent.Fiber.Fiber ()
     -> m_a3QA Control.Concurrent.Fiber.FiberId
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LC(S)),1*U(A,1*C1(U))><L,U(C(C1(U)))>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [$dMonadIO_sJ09 f_sJ0A]
        let {
          sat_sJ0H [Occ=Once]
            :: GHC.Types.IO Control.Concurrent.Fiber.FiberId
          [LclId, Str=] =
              \r srt:SRT:[] [s_sJ0B]
                  let {
                    sat_sJ0C [Occ=Once] :: GHC.Types.IO ()
                    [LclId, Str=] =
                        \r srt:SRT:[] [eta_B1]
                            Control.Concurrent.Fiber.unFiber f_sJ0A eta_B1;
                  } in 
                    case fork# [sat_sJ0C s_sJ0B] of _ [Occ=Dead] {
                      (#,#) ipv_sJ0E [Occ=Once] ipv1_sJ0F [Occ=Once] ->
                          let {
                            sat_sJ0G [Occ=Once] :: Control.Concurrent.Fiber.FiberId
                            [LclId, Str=] =
                                NO_CCS Control.Concurrent.Fiber.FiberId! [ipv1_sJ0F];
                          } in  (#,#) [ipv_sJ0E sat_sJ0G];
                    };
        } in  Control.Monad.IO.Class.liftIO $dMonadIO_sJ09 sat_sJ0H;
Control.Concurrent.Fiber.keep2
  :: GHC.Exception.SomeException
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=, Unf=OtherCon []] =
    \r srt:SRT:[r4B :-> Control.Concurrent.Fiber.$fAlternative_Fiber21] [e1_sJ0I
                                                                         eta_sJ0J]
        case e1_sJ0I of wild_sJ0K {
          GHC.Exception.SomeException $dException1_sJ0L [Occ=Once]
                                      e2_sJ0M [Occ=Once] ->
              case
                  GHC.Exception.$p1Exception $dException1_sJ0L GHC.Prim.proxy#
              of
              _ [Occ=Dead]
              { Data.Typeable.Internal.TypeRep dt_sJ0O [Occ=Once]
                                               dt1_sJ0P [Occ=Once]
                                               _ [Occ=Dead]
                                               _ [Occ=Dead]
                                               _ [Occ=Dead] ->
                    case
                        Control.Concurrent.Fiber.$fAlternative_Fiber21
                    of
                    _ [Occ=Dead]
                    { Data.Typeable.Internal.TypeRep dt2_sJ0U [Occ=Once]
                                                     dt3_sJ0V [Occ=Once]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead]
                                                     _ [Occ=Dead] ->
                          case eqWord64# [dt_sJ0O dt2_sJ0U] of _ [Occ=Dead] {
                            __DEFAULT -> raiseIO# [wild_sJ0K eta_sJ0J];
                            1 ->
                                case eqWord64# [dt1_sJ0P dt3_sJ0V] of _ [Occ=Dead] {
                                  __DEFAULT -> raiseIO# [wild_sJ0K eta_sJ0J];
                                  1 ->
                                      case e2_sJ0M of _ [Occ=Dead] {
                                        __DEFAULT -> (#,#) [eta_sJ0J GHC.Tuple.()];
                                      };
                                };
                          };
                    };
              };
        };
Control.Concurrent.Fiber.keep1
  :: Control.Concurrent.Fiber.Fiber ()
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Str=<L,U(C(C1(U)))><S,U>, Unf=OtherCon []] =
    \r srt:SRT:[r1J :-> Control.Concurrent.Fiber.keep2,
                r68 :-> Control.Concurrent.Fiber.no] [mx_sJ12 s_sJ13]
        let {
          sat_sJ1B [Occ=Once] :: GHC.Types.IO ()
          [LclId, Str=] =
              \r srt:SRT:[r1J :-> Control.Concurrent.Fiber.keep2] [s1_sJ14]
                  let {
                    sat_sJ17 [Occ=Once] :: GHC.Prim.Any
                    [LclId, Str=] =
                        \u srt:SRT:[r1J :-> Control.Concurrent.Fiber.keep2] []
                            let {
                              sat_sJ16 [Occ=Once]
                                :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              [LclId, Str=] =
                                  \r srt:SRT:[] [eta_B1]
                                      Control.Concurrent.Fiber.unFiber mx_sJ12 eta_B1;
                            } in  catch# [sat_sJ16 Control.Concurrent.Fiber.keep2 s1_sJ14];
                  } in 
                    case
                        __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ17]
                    of
                    _ [Occ=Dead]
                    { Unit# ipv_sJ19 ->
                          case freshStateToken# [ipv_sJ19] of wild_sJ1A [OS=OneShot] {
                            __DEFAULT -> (#,#) [wild_sJ1A ipv_sJ19];
                          };
                    };
        } in 
          case fork# [sat_sJ1B s_sJ13] of _ [Occ=Dead] {
            (#,#) ipv_sJ1D [Occ=Once] _ [Occ=Dead] ->
                GHC.MVar.takeMVar1 Control.Concurrent.Fiber.no ipv_sJ1D;
          };
Control.Concurrent.Fiber.keep
  :: Control.Concurrent.Fiber.Fiber () -> GHC.Types.IO ()
[GblId, Arity=2, Str=<L,U(C(C1(U)))><S,U>, Unf=OtherCon []] =
    \r srt:SRT:[r1K :-> Control.Concurrent.Fiber.keep1] [eta_B2 eta_B1]
        Control.Concurrent.Fiber.keep1 eta_B2 eta_B1;
Control.Concurrent.Fiber.block1
  :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(C(S)),C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [c_sJ1F eta_sJ1G]
        let {
          sat_sJ1O [Occ=Once] :: GHC.Prim.Any
          [LclId, Str=] =
              \r srt:SRT:[] [s_sJ1I]
                  let {
                    sat_sJ1K [Occ=Once] :: GHC.Prim.Any
                    [LclId, Str=] =
                        \u srt:SRT:[] [] c_sJ1F GHC.Tuple.() s_sJ1I;
                  } in 
                    case
                        __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ1K]
                    of
                    _ [Occ=Dead]
                    { Unit# ipv_sJ1M ->
                          case freshStateToken# [ipv_sJ1M] of wild_sJ1N [OS=OneShot] {
                            __DEFAULT -> (#,#) [wild_sJ1N ipv_sJ1M];
                          };
                    };
        } in 
          case
              __primcall  eta.fibers.PrimOps.yieldFiber [1 sat_sJ1O eta_sJ1G]
          of
          s'_sJ1P [OS=OneShot]
          { __DEFAULT -> c_sJ1F GHC.Tuple.() s'_sJ1P;
          };
Control.Concurrent.Fiber.block :: Control.Concurrent.Fiber.Fiber ()
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    NO_CCS Control.Concurrent.Fiber.Fiber! [Control.Concurrent.Fiber.block1];
Control.Concurrent.Fiber.yield1
  :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO ())
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(C(S)),C(C1(U(U,U)))><S,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [c_sJ1Q eta_sJ1R]
        let {
          sat_sJ1Z [Occ=Once] :: GHC.Prim.Any
          [LclId, Str=] =
              \r srt:SRT:[] [s_sJ1T]
                  let {
                    sat_sJ1V [Occ=Once] :: GHC.Prim.Any
                    [LclId, Str=] =
                        \u srt:SRT:[] [] c_sJ1Q GHC.Tuple.() s_sJ1T;
                  } in 
                    case
                        __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ1V]
                    of
                    _ [Occ=Dead]
                    { Unit# ipv_sJ1X ->
                          case freshStateToken# [ipv_sJ1X] of wild_sJ1Y [OS=OneShot] {
                            __DEFAULT -> (#,#) [wild_sJ1Y ipv_sJ1X];
                          };
                    };
        } in 
          case
              __primcall  eta.fibers.PrimOps.yieldFiber [0 sat_sJ1Z eta_sJ1R]
          of
          s'_sJ20 [OS=OneShot]
          { __DEFAULT -> c_sJ1Q GHC.Tuple.() s'_sJ20;
          };
Control.Concurrent.Fiber.yield :: Control.Concurrent.Fiber.Fiber ()
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    NO_CCS Control.Concurrent.Fiber.Fiber! [Control.Concurrent.Fiber.yield1];
Control.Concurrent.Fiber.$w$c<> [InlPrag=[0]]
  :: forall a_a81L.
     GHC.Base.Semigroup a_a81L =>
     Control.Concurrent.Fiber.Fiber a_a81L
     -> Control.Concurrent.Fiber.Fiber a_a81L
     -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a_a81L)
           -> GHC.Types.IO a_a81L #)
[GblId,
 Arity=3,
 Str=<L,1*U(1*C(U),A,A)><L,U(C(C1(U)))><L,U(C(C1(U)))>,
 Unf=OtherCon []] =
    \r srt:SRT:[r3P :-> Control.Concurrent.Fiber.$w$c<*>] [w_sJ21
                                                           w1_sJ22
                                                           w2_sJ23]
        let {
          f_sJ24 [Occ=OnceL!, Dmd=<L,C(U)>] :: a2_a81L -> a2_a81L -> a2_a81L
          [LclId, Str=] =
              \u srt:SRT:[] [] GHC.Base.<> w_sJ21;
        } in 
          let {
            sat_sJ2B [Occ=Once]
              :: (Control.Concurrent.Fiber.Dyn
                  -> GHC.Types.IO (a2_a81L -> a2_a81L))
                 -> GHC.Types.IO (a2_a81L -> a2_a81L)
            [LclId, Str=] =
                \r srt:SRT:[] [c_sJ25]
                    case w1_sJ22 of _ [Occ=Dead] {
                      Control.Concurrent.Fiber.Fiber ds_sJ27 [Occ=Once!] ->
                          let {
                            sat_sJ2A [Occ=Once]
                              :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a81L
                            [LclId, Str=] =
                                \r srt:SRT:[] [x_sJ28]
                                    let {
                                      sat_sJ29 [Occ=Once] :: Control.Concurrent.Fiber.Dyn
                                      [LclId, Str=] =
                                          \u srt:SRT:[] [] f_sJ24 x_sJ28;
                                    } in  c_sJ25 sat_sJ29;
                          } in  ds_sJ27 sat_sJ2A;
                    }; } in
          let {
            sat_sJ2C [Occ=Once]
              :: Control.Concurrent.Fiber.Fiber (a2_a81L -> a2_a81L)
            [LclId, Str=] =
                NO_CCS Control.Concurrent.Fiber.Fiber! [sat_sJ2B];
          } in  Control.Concurrent.Fiber.$w$c<*> sat_sJ2C w2_sJ23;
Control.Concurrent.Fiber.$fSemigroup_Fiber_$c<> [InlPrag=INLINE[0]]
  :: forall a_a81L.
     GHC.Base.Semigroup a_a81L =>
     Control.Concurrent.Fiber.Fiber a_a81L
     -> Control.Concurrent.Fiber.Fiber a_a81L
     -> Control.Concurrent.Fiber.Fiber a_a81L
[GblId,
 Arity=3,
 Str=<L,1*U(1*C(U),A,A)><L,U(C(C1(U)))><L,U(C(C1(U)))>m,
 Unf=OtherCon []] =
    \r srt:SRT:[r2E :-> Control.Concurrent.Fiber.$w$c<>] [w_sJ2D
                                                          w1_sJ2E
                                                          w2_sJ2F]
        case
            Control.Concurrent.Fiber.$w$c<> w_sJ2D w1_sJ2E w2_sJ2F
        of
        _ [Occ=Dead]
        { Unit# ww1_sJ2H [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sJ2H];
        };
Control.Concurrent.Fiber.$w$csconcat [InlPrag=[0]]
  :: forall a_a81L.
     GHC.Base.Semigroup a_a81L =>
     Control.Concurrent.Fiber.Fiber a_a81L
     -> [Control.Concurrent.Fiber.Fiber a_a81L]
     -> Control.Concurrent.Fiber.Fiber a_a81L
[GblId,
 Arity=3,
 Str=<L,U(C(U),A,A)><L,U(U)><S,1*U>,
 Unf=OtherCon []] =
    \r srt:SRT:[r3P :-> Control.Concurrent.Fiber.$w$c<*>] [w_sJ2I
                                                           ww_sJ2J
                                                           ww1_sJ2K]
        let {
          f_sJ2L [Occ=OnceL!] :: a2_a81L -> a2_a81L -> a2_a81L
          [LclId, Str=] =
              \u srt:SRT:[] [] GHC.Base.<> w_sJ2I; } in
        let {
          go_sJ2M [Occ=LoopBreaker]
            :: Control.Concurrent.Fiber.Fiber a2_a81L
               -> [Control.Concurrent.Fiber.Fiber a2_a81L]
               -> Control.Concurrent.Fiber.Fiber a2_a81L
          [LclId, Arity=2, Str=<L,U(U)><S,1*U>, Unf=OtherCon []] =
              sat-only \r srt:SRT:[r3P :-> Control.Concurrent.Fiber.$w$c<*>] [b_sJ2N
                                                                              ds1_sJ2O]
                  case ds1_sJ2O of _ [Occ=Dead] {
                    [] -> b_sJ2N;
                    : c_sJ2Q [Occ=Once] cs_sJ2R [Occ=Once] ->
                        let {
                          sat_sJ30 [Occ=Once, Dmd=<L,U(C(C1(U)))>]
                            :: Control.Concurrent.Fiber.Fiber a2_a81L
                          [LclId, Str=] =
                              \u srt:SRT:[] [] go_sJ2M c_sJ2Q cs_sJ2R;
                        } in 
                          let {
                            sat_sJ2Y [Occ=Once]
                              :: (Control.Concurrent.Fiber.Dyn
                                  -> GHC.Types.IO (a2_a81L -> a2_a81L))
                                 -> GHC.Types.IO (a2_a81L -> a2_a81L)
                            [LclId, Str=] =
                                \r srt:SRT:[] [c1_sJ2S]
                                    case b_sJ2N of _ [Occ=Dead] {
                                      Control.Concurrent.Fiber.Fiber ds_sJ2U [Occ=Once!] ->
                                          let {
                                            sat_sJ2X [Occ=Once]
                                              :: Control.Concurrent.Fiber.Dyn
                                                 -> GHC.Types.IO a2_a81L
                                            [LclId, Str=] =
                                                \r srt:SRT:[] [x_sJ2V]
                                                    let {
                                                      sat_sJ2W [Occ=Once]
                                                        :: Control.Concurrent.Fiber.Dyn
                                                      [LclId, Str=] =
                                                          \u srt:SRT:[] [] f_sJ2L x_sJ2V;
                                                    } in  c1_sJ2S sat_sJ2W;
                                          } in  ds_sJ2U sat_sJ2X;
                                    }; } in
                          let {
                            sat_sJ2Z [Occ=Once]
                              :: Control.Concurrent.Fiber.Fiber (a2_a81L -> a2_a81L)
                            [LclId, Str=] =
                                NO_CCS Control.Concurrent.Fiber.Fiber! [sat_sJ2Y];
                          } in 
                            case
                                Control.Concurrent.Fiber.$w$c<*> sat_sJ2Z sat_sJ30
                            of
                            _ [Occ=Dead]
                            { Unit# ww3_sJ32 [Occ=Once] ->
                                  Control.Concurrent.Fiber.Fiber [ww3_sJ32];
                            };
                  };
        } in  go_sJ2M ww_sJ2J ww1_sJ2K;
Control.Concurrent.Fiber.$fSemigroup_Fiber_$csconcat [InlPrag=INLINE[0]]
  :: forall a_a81L.
     GHC.Base.Semigroup a_a81L =>
     GHC.Base.NonEmpty (Control.Concurrent.Fiber.Fiber a_a81L)
     -> Control.Concurrent.Fiber.Fiber a_a81L
[GblId,
 Arity=2,
 Str=<L,U(C(U),A,A)><S(LS),1*U(U(U),1*U)>,
 Unf=OtherCon []] =
    \r srt:SRT:[r2B :-> Control.Concurrent.Fiber.$w$csconcat] [w_sJ33
                                                               w1_sJ34]
        case w1_sJ34 of _ [Occ=Dead] {
          GHC.Base.:| ww1_sJ36 [Occ=Once] ww2_sJ37 [Occ=Once] ->
              Control.Concurrent.Fiber.$w$csconcat w_sJ33 ww1_sJ36 ww2_sJ37;
        };
Control.Concurrent.Fiber.$fSemigroup_Fiber [InlPrag=[ALWAYS] CONLIKE]
  :: forall a_a5JH.
     GHC.Base.Semigroup a_a5JH =>
     GHC.Base.Semigroup (Control.Concurrent.Fiber.Fiber a_a5JH)
[GblId[DFunId], Arity=1, Str=<L,U(C(U),A,A)>m, Unf=OtherCon []] =
    \r srt:SRT:[r2F :-> Control.Concurrent.Fiber.$fSemigroup_Fiber_$cstimes,
                r2G :-> Control.Concurrent.Fiber.$fSemigroup_Fiber_$csconcat,
                r2H :-> Control.Concurrent.Fiber.$fSemigroup_Fiber_$c<>] [$dSemigroup_sJ38]
        let {
          sat_sJ3B [Occ=Once]
            :: forall b_a82I.
               GHC.Real.Integral b_a82I =>
               b_a82I
               -> Control.Concurrent.Fiber.Fiber a2_a81L
               -> Control.Concurrent.Fiber.Fiber a2_a81L
          [LclId, Str=] =
              \u srt:SRT:[r2F :-> Control.Concurrent.Fiber.$fSemigroup_Fiber_$cstimes] []
                  Control.Concurrent.Fiber.$fSemigroup_Fiber_$cstimes
                      $dSemigroup_sJ38; } in
        let {
          sat_sJ3A [Occ=Once]
            :: GHC.Base.NonEmpty (Control.Concurrent.Fiber.Fiber a2_a81L)
               -> Control.Concurrent.Fiber.Fiber a2_a81L
          [LclId, Str=] =
              \r srt:SRT:[r2G :-> Control.Concurrent.Fiber.$fSemigroup_Fiber_$csconcat] [eta_B1]
                  Control.Concurrent.Fiber.$fSemigroup_Fiber_$csconcat
                      $dSemigroup_sJ38 eta_B1; } in
        let {
          sat_sJ39 [Occ=Once]
            :: Control.Concurrent.Fiber.Fiber a2_a81L
               -> Control.Concurrent.Fiber.Fiber a2_a81L
               -> Control.Concurrent.Fiber.Fiber a2_a81L
          [LclId, Str=] =
              \r srt:SRT:[r2H :-> Control.Concurrent.Fiber.$fSemigroup_Fiber_$c<>] [eta_B2
                                                                                    eta_B1]
                  Control.Concurrent.Fiber.$fSemigroup_Fiber_$c<>
                      $dSemigroup_sJ38 eta_B2 eta_B1;
        } in  GHC.Base.D:Semigroup [sat_sJ39 sat_sJ3A sat_sJ3B];
Control.Concurrent.Fiber.$fSemigroup_Fiber_$cstimes [Occ=LoopBreaker]
  :: forall a_a81L.
     GHC.Base.Semigroup a_a81L =>
     forall b_a82I.
     GHC.Real.Integral b_a82I =>
     b_a82I
     -> Control.Concurrent.Fiber.Fiber a_a81L
     -> Control.Concurrent.Fiber.Fiber a_a81L
[GblId, Arity=1, Str=<L,U(C(U),A,A)>, Unf=OtherCon []] =
    \r srt:SRT:[r2I :-> Control.Concurrent.Fiber.$fSemigroup_Fiber,
                rYM :-> Data.Semigroup.Internal.stimesDefault] [$dSemigroup_sJ3C]
        let {
          $dSemigroup1_sJ3D [Occ=OnceL, Dmd=<L,U(C(C(U)),U,U)>]
            :: GHC.Base.Semigroup (Control.Concurrent.Fiber.Fiber a2_a81L)
          [LclId, Str=] =
              \u srt:SRT:[r2I :-> Control.Concurrent.Fiber.$fSemigroup_Fiber] []
                  Control.Concurrent.Fiber.$fSemigroup_Fiber $dSemigroup_sJ3C; } in
        let {
          sat_sJ3H [Occ=Once]
            :: forall b_a9Y6.
               GHC.Real.Integral b_a9Y6 =>
               b_a9Y6
               -> Control.Concurrent.Fiber.Fiber a2_a81L
               -> Control.Concurrent.Fiber.Fiber a2_a81L
          [LclId, Str=] =
              \r srt:SRT:[rYM :-> Data.Semigroup.Internal.stimesDefault] [$dIntegral_sJ3E
                                                                          eta_sJ3F
                                                                          eta1_sJ3G]
                  Data.Semigroup.Internal.stimesDefault
                      $dIntegral_sJ3E $dSemigroup1_sJ3D eta_sJ3F eta1_sJ3G;
        } in  sat_sJ3H;
Control.Concurrent.Fiber.runFiber'
  :: forall a_a3Q1.
     Control.Concurrent.Fiber.Fiber a_a3Q1 -> GHC.Types.IO a_a3Q1
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C1(C1(U)))><L,U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B2 eta_B1]
        Control.Concurrent.Fiber.unFiber eta_B2 eta_B1;
Control.Concurrent.Fiber.react [InlPrag=INLINE[0]]
  :: forall eventdata_a3PX response_a3PY.
     ((eventdata_a3PX -> GHC.Types.IO response_a3PY) -> GHC.Types.IO ())
     -> GHC.Types.IO response_a3PY
     -> Control.Concurrent.Fiber.Fiber eventdata_a3PX
[GblId, Arity=2, Str=<L,C(C1(H))><L,C(U)>m, Unf=OtherCon []] =
    \r srt:SRT:[r3U :-> Control.Concurrent.Fiber.$fAlternative_Fiber8] [w_sJ3I
                                                                        w1_sJ3J]
        let {
          sat_sJ3Y [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO eventdata_a3PX)
               -> GHC.Types.IO eventdata_a3PX
          [LclId, Str=] =
              \r srt:SRT:[r3U :-> Control.Concurrent.Fiber.$fAlternative_Fiber8] [c_sJ3K
                                                                                  eta_sJ3L]
                  let {
                    sat_sJ3T [Occ=Once] :: eventdata_a3PX -> GHC.Types.IO response_a3PY
                    [LclId, Str=] =
                        \r srt:SRT:[] [x_sJ3M s_sJ3N]
                            let {
                              sat_sJ3P [Occ=Once] :: GHC.Prim.Any
                              [LclId, Str=] =
                                  \u srt:SRT:[] [] c_sJ3K x_sJ3M s_sJ3N;
                            } in 
                              case
                                  __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ3P]
                              of
                              _ [Occ=Dead]
                              { Unit# ipv_sJ3R [Occ=Once] ->
                                    case freshStateToken# [ipv_sJ3R] of wild_sJ3S [OS=OneShot] {
                                      __DEFAULT -> w1_sJ3J wild_sJ3S;
                                    };
                              };
                  } in 
                    case w_sJ3I sat_sJ3T eta_sJ3L of _ [Occ=Dead] {
                      (#,#) _ [Occ=Dead] _ [Occ=Dead] ->
                          Control.Concurrent.Fiber.$fAlternative_Fiber8;
                    };
        } in  Control.Concurrent.Fiber.Fiber [sat_sJ3Y];
Control.Concurrent.Fiber.$wreactOption [InlPrag=[0]]
  :: GHC.Base.String
     -> (# (Control.Concurrent.Fiber.Dyn
            -> GHC.Types.IO GHC.Base.String)
           -> GHC.Types.IO GHC.Base.String #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r srt:SRT:[r3U :-> Control.Concurrent.Fiber.$fAlternative_Fiber8,
                r66 :-> Control.Concurrent.Fiber.rcb] [w_sJ3Z]
        let {
          sat_sJ4M [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO GHC.Base.String)
               -> GHC.Types.IO GHC.Base.String
          [LclId, Str=] =
              \r srt:SRT:[r3U :-> Control.Concurrent.Fiber.$fAlternative_Fiber8,
                          r66 :-> Control.Concurrent.Fiber.rcb] [c_sJ40 eta_sJ41]
                  case Control.Concurrent.Fiber.rcb of _ [Occ=Dead] {
                    GHC.STRef.STRef r#_sJ43 [Occ=Once] ->
                        let {
                          a2_sJ44 [Occ=OnceL]
                            :: GHC.Base.String
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          [LclId, Arity=2, Str=<L,1*U><L,U>, Unf=OtherCon []] =
                              \r srt:SRT:[r3U :-> Control.Concurrent.Fiber.$fAlternative_Fiber8] [x_sJ45
                                                                                                  s_sJ46]
                                  let {
                                    sat_sJ4A [Occ=Once] :: GHC.Prim.Any
                                    [LclId, Str=] =
                                        \u srt:SRT:[r3U :-> Control.Concurrent.Fiber.$fAlternative_Fiber8] []
                                            case
                                                GHC.Classes.$fEq_[]_$s$c==1 x_sJ45 w_sJ3Z
                                            of
                                            _ [Occ=Dead]
                                            { GHC.Types.False ->
                                                  Control.Concurrent.Fiber.$fAlternative_Fiber8;
                                              GHC.Types.True -> c_sJ40 w_sJ3Z s_sJ46;
                                            };
                                  } in 
                                    case
                                        __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ4A]
                                    of
                                    _ [Occ=Dead]
                                    { Unit# ipv_sJ4C [Occ=Once] ->
                                          case
                                              freshStateToken# [ipv_sJ4C]
                                          of
                                          wild1_sJ4D [OS=OneShot]
                                          { __DEFAULT -> (#,#) [wild1_sJ4D GHC.Tuple.()];
                                          };
                                    }; } in
                        let {
                          sat_sJ4H [Occ=Once]
                            :: [GHC.Base.String -> GHC.Types.IO ()]
                               -> ([GHC.Base.String -> GHC.Types.IO ()], ())
                          [LclId, Str=] =
                              \r srt:SRT:[] [cbs_sJ4E]
                                  let {
                                    sat_sJ4G [Occ=Once] :: [GHC.Base.String -> GHC.Types.IO ()]
                                    [LclId, Str=] =
                                        \u srt:SRT:[] []
                                            let {
                                              sat_sJ4F [Occ=Once]
                                                :: [GHC.Base.String -> GHC.Types.IO ()]
                                              [LclId, Str=] =
                                                  NO_CCS :! [a2_sJ44 cbs_sJ4E];
                                            } in  GHC.List.reverse1 sat_sJ4F GHC.Types.[];
                                  } in  (,) [sat_sJ4G GHC.Tuple.()];
                        } in 
                          case
                              atomicModifyMutVar# [r#_sJ43 sat_sJ4H eta_sJ41]
                          of
                          _ [Occ=Dead]
                          { (#,#) _ [Occ=Dead] _ [Occ=Dead] ->
                                Control.Concurrent.Fiber.$fAlternative_Fiber8;
                          };
                  };
        } in  Unit# [sat_sJ4M];
Control.Concurrent.Fiber.reactOption [InlPrag=INLINE[0]]
  :: GHC.Base.String
     -> Control.Concurrent.Fiber.Fiber GHC.Base.String
[GblId, Arity=1, Str=<L,U>m, Unf=OtherCon []] =
    \r srt:SRT:[r1Z :-> Control.Concurrent.Fiber.$wreactOption] [w_sJ4N]
        case
            Control.Concurrent.Fiber.$wreactOption w_sJ4N
        of
        _ [Occ=Dead]
        { Unit# ww1_sJ4P [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sJ4P];
        };
Control.Concurrent.Fiber.async4 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "async empty"#;
Control.Concurrent.Fiber.async3 :: GHC.Base.String
[GblId, Str=] =
    \u srt:SRT:[r1Q :-> Control.Concurrent.Fiber.async4,
                r4P :-> GHC.Show.showLitString] []
        GHC.Show.showLitString
            Control.Concurrent.Fiber.async4
            Control.Concurrent.Fiber.$fAlternative_Fiber5;
Control.Concurrent.Fiber.async2 :: [GHC.Types.Char]
[GblId, Str=, Unf=OtherCon []] =
    NO_CCS :! [GHC.Show.shows7 Control.Concurrent.Fiber.async3];
Control.Concurrent.Fiber.async1
  :: forall a_a5MM. Control.Concurrent.Fiber.Fiber a_a5MM
[GblId, Str=] =
    \u srt:SRT:[r1S :-> Control.Concurrent.Fiber.async2,
                r4W :-> Control.Concurrent.Fiber.$fAlternative_Fiber_$cempty,
                r5A :-> Debug.Trace.trace] []
        Debug.Trace.trace
            Control.Concurrent.Fiber.async2
            Control.Concurrent.Fiber.$fAlternative_Fiber_$cempty;
Control.Concurrent.Fiber.$wasync [InlPrag=[0]]
  :: forall a_a3Q0.
     GHC.Types.IO a_a3Q0
     -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a_a3Q0)
           -> GHC.Types.IO a_a3Q0 #)
[GblId, Arity=1, Str=<L,C(U(U,U))>, Unf=OtherCon []] =
    \r srt:SRT:[r22 :-> Control.Concurrent.Fiber.async1] [w_sJ4Q]
        let {
          sat_sJ58 [Occ=Once]
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a3Q0)
               -> GHC.Types.IO a2_a3Q0
          [LclId, Str=] =
              \r srt:SRT:[r22 :-> Control.Concurrent.Fiber.async1] [c_sJ4R
                                                                    eta_sJ4S]
                  let {
                    sat_sJ52 [Occ=Once] :: GHC.Types.IO ()
                    [LclId, Str=] =
                        \r srt:SRT:[] [s_sJ4T]
                            let {
                              sat_sJ4Y [Occ=Once] :: GHC.Prim.Any
                              [LclId, Str=] =
                                  \u srt:SRT:[] []
                                      case w_sJ4Q s_sJ4T of _ [Occ=Dead] {
                                        (#,#) ipv_sJ4W [Occ=Once] ipv1_sJ4X [Occ=Once] ->
                                            c_sJ4R ipv1_sJ4X ipv_sJ4W;
                                      };
                            } in 
                              case
                                  __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ4Y]
                              of
                              _ [Occ=Dead]
                              { Unit# ipv_sJ50 ->
                                    case freshStateToken# [ipv_sJ50] of wild_sJ51 [OS=OneShot] {
                                      __DEFAULT -> (#,#) [wild_sJ51 ipv_sJ50];
                                    };
                              };
                  } in 
                    case fork# [sat_sJ52 eta_sJ4S] of _ [Occ=Dead] {
                      (#,#) ipv_sJ54 [Occ=Once] _ [Occ=Dead] ->
                          case Control.Concurrent.Fiber.async1 of _ [Occ=Dead] {
                            Control.Concurrent.Fiber.Fiber ds1_sJ57 [Occ=Once!] ->
                                ds1_sJ57 c_sJ4R ipv_sJ54;
                          };
                    };
        } in  Unit# [sat_sJ58];
Control.Concurrent.Fiber.async [InlPrag=INLINE[0]]
  :: forall a_a3Q0.
     GHC.Types.IO a_a3Q0 -> Control.Concurrent.Fiber.Fiber a_a3Q0
[GblId, Arity=1, Str=<L,C(U(U,U))>m, Unf=OtherCon []] =
    \r srt:SRT:[r23 :-> Control.Concurrent.Fiber.$wasync] [w_sJ59]
        case Control.Concurrent.Fiber.$wasync w_sJ59 of _ [Occ=Dead] {
          Unit# ww1_sJ5B [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sJ5B];
        };
Control.Concurrent.Fiber.$fMonoid_Fiber_$cmempty
  :: forall a_a80T.
     (GHC.Base.Semigroup (Control.Concurrent.Fiber.Fiber a_a80T),
      GHC.Base.Monoid a_a80T) =>
     Control.Concurrent.Fiber.Fiber a_a80T
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><L,1*U(A,1*U,A,A)>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [$dSemigroup_sJ5C $dMonoid_sJ5D]
        let {
          a3_sJ5E [Occ=OnceL] :: a2_a80T
          [LclId, Str=] =
              \u srt:SRT:[] [] GHC.Base.mempty $dMonoid_sJ5D;
        } in 
          let {
            sat_sJ5G [Occ=Once]
              :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a80T)
                 -> GHC.Types.IO a2_a80T
            [LclId, Str=] =
                \r srt:SRT:[] [ds_sJ5F] ds_sJ5F a3_sJ5E;
          } in  Control.Concurrent.Fiber.Fiber [sat_sJ5G];
Control.Concurrent.Fiber.$fMonoid_Fiber_$cmconcat
  :: forall a_a80T.
     (GHC.Base.Semigroup (Control.Concurrent.Fiber.Fiber a_a80T),
      GHC.Base.Monoid a_a80T) =>
     [Control.Concurrent.Fiber.Fiber a_a80T]
     -> Control.Concurrent.Fiber.Fiber a_a80T
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*U(1*C(C1(U(U))),A,A)><L,1*U(A,1*U,A,A)><S,1*U>,
 Unf=OtherCon []] =
    \r srt:SRT:[] [$dSemigroup_sJ5H $dMonoid_sJ5I eta_sJ5J]
        let {
          k_sJ5K [Occ=OnceL!, Dmd=<L,C(C(U(U)))>]
            :: Control.Concurrent.Fiber.Fiber a2_a80T
               -> Control.Concurrent.Fiber.Fiber a2_a80T
               -> Control.Concurrent.Fiber.Fiber a2_a80T
          [LclId, Str=] =
              \u srt:SRT:[] [] GHC.Base.<> $dSemigroup_sJ5H; } in
        let {
          a3_sJ5L [Occ=OnceL] :: a2_a80T
          [LclId, Str=] =
              \u srt:SRT:[] [] GHC.Base.mempty $dMonoid_sJ5I; } in
        let {
          a4_sJ5M
            :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a80T)
               -> GHC.Types.IO a2_a80T
          [LclId, Arity=1, Str=<C(S),1*C1(U)>, Unf=OtherCon []] =
              \r srt:SRT:[] [ds_sJ5N] ds_sJ5N a3_sJ5L; } in
        let {
          z_sJ5O [Occ=OnceL] :: Control.Concurrent.Fiber.Fiber a2_a80T
          [LclId, Str=, Unf=OtherCon []] =
              NO_CCS Control.Concurrent.Fiber.Fiber! [a4_sJ5M]; } in
        let {
          go_sJ5P [Occ=LoopBreaker]
            :: [Control.Concurrent.Fiber.Fiber a2_a80T]
               -> Control.Concurrent.Fiber.Fiber a2_a80T
          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
              sat-only \r srt:SRT:[] [ds_sJ5Q]
                  case ds_sJ5Q of _ [Occ=Dead] {
                    [] -> z_sJ5O;
                    : y_sJ5S [Occ=Once] ys_sJ5T [Occ=Once] ->
                        let {
                          sat_sJ5U [Occ=Once] :: Control.Concurrent.Fiber.Fiber a2_a80T
                          [LclId, Str=] =
                              \u srt:SRT:[] [] go_sJ5P ys_sJ5T;
                        } in  k_sJ5K y_sJ5S sat_sJ5U;
                  };
        } in  go_sJ5P eta_sJ5J;
Control.Concurrent.Fiber.$fMonoid_Fiber [InlPrag=[ALWAYS] CONLIKE]
  :: forall a_a5J4.
     (GHC.Base.Semigroup (Control.Concurrent.Fiber.Fiber a_a5J4),
      GHC.Base.Monoid a_a5J4) =>
     GHC.Base.Monoid (Control.Concurrent.Fiber.Fiber a_a5J4)
[GblId[DFunId[1]],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U(U,U,U)><L,U(A,U,A,A)>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [$dSemigroup_sJ5V $dMonoid_sJ5W]
        let {
          sat_sJ5Z [Occ=Once]
            :: [Control.Concurrent.Fiber.Fiber a2_a80T]
               -> Control.Concurrent.Fiber.Fiber a2_a80T
          [LclId, Str=] =
              \r srt:SRT:[] [eta_B1]
                  Control.Concurrent.Fiber.$fMonoid_Fiber_$cmconcat
                      $dSemigroup_sJ5V $dMonoid_sJ5W eta_B1; } in
        let {
          sat_sJ5Y [Occ=Once]
            :: Control.Concurrent.Fiber.Fiber a2_a80T
               -> Control.Concurrent.Fiber.Fiber a2_a80T
               -> Control.Concurrent.Fiber.Fiber a2_a80T
          [LclId, Str=] =
              \u srt:SRT:[] [] GHC.Base.<> $dSemigroup_sJ5V; } in
        let {
          sat_sJ5X [Occ=Once] :: Control.Concurrent.Fiber.Fiber a2_a80T
          [LclId, Str=] =
              \u srt:SRT:[] []
                  Control.Concurrent.Fiber.$fMonoid_Fiber_$cmempty
                      $dSemigroup_sJ5V $dMonoid_sJ5W;
        } in 
          GHC.Base.D:Monoid [$dSemigroup_sJ5V sat_sJ5X sat_sJ5Y sat_sJ5Z];
Control.Concurrent.Fiber.test16 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    NO_CCS GHC.Integer.Type.S#! [2];
Control.Concurrent.Fiber.test15 :: GHC.Base.String
[GblId, Str=] =
    \u srt:SRT:[rW :-> GHC.Show.$w$cshowsPrec2] []
        case
            GHC.Show.$w$cshowsPrec2
                0 Control.Concurrent.Fiber.test16 GHC.Types.[]
        of
        _ [Occ=Dead]
        { (#,#) ww3_sJ61 [Occ=Once] ww4_sJ62 [Occ=Once] ->
              : [ww3_sJ61 ww4_sJ62];
        };
Control.Concurrent.Fiber.test14
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r srt:SRT:[rX :-> Control.Concurrent.Fiber.test15,
                rY :-> GHC.IO.Handle.FD.stdout,
                rZ :-> GHC.IO.Handle.Text.hPutStr2] [s_sJ63]
        let {
          sat_sJ65 [Occ=Once] :: GHC.Prim.Any
          [LclId, Str=] =
              \u srt:SRT:[rX :-> Control.Concurrent.Fiber.test15,
                          rY :-> GHC.IO.Handle.FD.stdout,
                          rZ :-> GHC.IO.Handle.Text.hPutStr2] []
                  GHC.IO.Handle.Text.hPutStr2
                      GHC.IO.Handle.FD.stdout
                      Control.Concurrent.Fiber.test15
                      GHC.Types.True
                      s_sJ63;
        } in 
          case
              __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ65]
          of
          _ [Occ=Dead]
          { Unit# ipv_sJ67 ->
                case freshStateToken# [ipv_sJ67] of wild_sJ68 [OS=OneShot] {
                  __DEFAULT -> (#,#) [wild_sJ68 ipv_sJ67];
                };
          };
Control.Concurrent.Fiber.test2 :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r srt:SRT:[r10 :-> Control.Concurrent.Fiber.test14] [eta_B1]
        Control.Concurrent.Fiber.test14 eta_B1;
Control.Concurrent.Fiber.test6 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    NO_CCS GHC.Integer.Type.S#! [0];
lvl_rIIN :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    NO_CCS GHC.Integer.Type.S#! [1];
Control.Concurrent.Fiber.test_$s$wsum [Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Integer.Type.Integer
     -> GHC.STRef.STRef GHC.Prim.RealWorld GHC.Integer.Type.Integer
        ~R# GHC.IORef.IORef GHC.Integer.Type.Integer
     -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO ())
           -> GHC.Types.IO () #)
[GblId, Arity=3, Str=<S,U><L,U><L,U>, Unf=OtherCon []] =
    \r srt:SRT:[rH :-> Control.Concurrent.Fiber.test_$s$wsum,
                rY :-> GHC.IO.Handle.FD.stdout, rZ :-> GHC.IO.Handle.Text.hPutStr2,
                r370 :-> GHC.Show.$fShow_Integer_$cshow] [sc_sJ69 sc1_sJ6A sg_sI3L]
        case
            GHC.Integer.Type.eqInteger# sc_sJ69 Control.Concurrent.Fiber.test6
        of
        _ [Occ=Dead]
        { __DEFAULT ->
              let {
                k_sJ6C [Occ=OnceL!, Dmd=<L,U(C(C(U)))>]
                  :: Control.Concurrent.Fiber.Fiber ()
                [LclId, Str=] =
                    \u srt:SRT:[rH :-> Control.Concurrent.Fiber.test_$s$wsum] []
                        let {
                          sat_sJ6D [Occ=Once] :: GHC.Integer.Type.Integer
                          [LclId, Str=] =
                              \u srt:SRT:[] [] GHC.Integer.Type.minusInteger sc_sJ69 lvl_rIIN;
                        } in 
                          case
                              Control.Concurrent.Fiber.test_$s$wsum
                                  sat_sJ6D sc1_sJ6A GHC.Prim.coercionToken#
                          of
                          _ [Occ=Dead]
                          { Unit# ww1_sJ6F [Occ=Once] ->
                                Control.Concurrent.Fiber.Fiber [ww1_sJ6F];
                          };
              } in 
                let {
                  sat_sJ6P [Occ=Once]
                    :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO ())
                       -> GHC.Types.IO ()
                  [LclId, Str=] =
                      \r srt:SRT:[] [c_sJ6G s_sJ6H]
                          case readMutVar# [sc1_sJ6A s_sJ6H] of _ [Occ=Dead] {
                            (#,#) ipv_sJ6J [Occ=Once] ipv1_sJ6K [Occ=Once] ->
                                let {
                                  sat_sJ6L [Occ=Once] :: GHC.Integer.Type.Integer
                                  [LclId, Str=] =
                                      \u srt:SRT:[] []
                                          GHC.Integer.Type.plusInteger ipv1_sJ6K sc_sJ69;
                                } in 
                                  case
                                      writeMutVar# [sc1_sJ6A sat_sJ6L ipv_sJ6J]
                                  of
                                  s2#_sJ6M [OS=OneShot]
                                  { __DEFAULT ->
                                        case k_sJ6C of _ [Occ=Dead] {
                                          Control.Concurrent.Fiber.Fiber ds_sJ6O [Occ=Once!] ->
                                              ds_sJ6O c_sJ6G s2#_sJ6M;
                                        };
                                  };
                          };
                } in  Unit# [sat_sJ6P];
          1 ->
              let {
                sat_sJ6Z [Occ=Once]
                  :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO ())
                     -> GHC.Types.IO ()
                [LclId, Str=] =
                    \r srt:SRT:[rY :-> GHC.IO.Handle.FD.stdout,
                                rZ :-> GHC.IO.Handle.Text.hPutStr2,
                                r370 :-> GHC.Show.$fShow_Integer_$cshow] [c_sJ6Q s_sJ6R]
                        case readMutVar# [sc1_sJ6A s_sJ6R] of _ [Occ=Dead] {
                          (#,#) ipv_sJ6T [Occ=Once] ipv1_sJ6U [Occ=Once] ->
                              let {
                                sat_sJ6V [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
                                [LclId, Str=] =
                                    \s srt:SRT:[r370 :-> GHC.Show.$fShow_Integer_$cshow] []
                                        GHC.Show.$fShow_Integer_$cshow ipv1_sJ6U;
                              } in 
                                case
                                    GHC.IO.Handle.Text.hPutStr2
                                        GHC.IO.Handle.FD.stdout sat_sJ6V GHC.Types.True ipv_sJ6T
                                of
                                _ [Occ=Dead]
                                { (#,#) ipv2_sJ6X [Occ=Once] ipv3_sJ6Y [Occ=Once] ->
                                      c_sJ6Q ipv3_sJ6Y ipv2_sJ6X;
                                };
                        };
              } in  Unit# [sat_sJ6Z];
        };
Control.Concurrent.Fiber.test5 :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    NO_CCS GHC.Integer.Type.S#! [1000000];
Control.Concurrent.Fiber.test4
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r srt:SRT:[rH :-> Control.Concurrent.Fiber.test_$s$wsum] [s_sJ70]
        let {
          sat_sJ77 [Occ=Once] :: GHC.Prim.Any
          [LclId, Str=] =
              \u srt:SRT:[rH :-> Control.Concurrent.Fiber.test_$s$wsum] []
                  case
                      newMutVar# [Control.Concurrent.Fiber.test6 s_sJ70]
                  of
                  _ [Occ=Dead]
                  { (#,#) ipv_sJ73 [Occ=Once] ipv1_sJ74 [Occ=Once] ->
                        case
                            Control.Concurrent.Fiber.test_$s$wsum
                                Control.Concurrent.Fiber.test5 ipv1_sJ74 GHC.Prim.coercionToken#
                        of
                        _ [Occ=Dead]
                        { Unit# ww1_sJ76 [Occ=Once!] ->
                              ww1_sJ76 Control.Concurrent.Fiber.unFiber1 ipv_sJ73;
                        };
                  };
        } in 
          case
              __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ77]
          of
          _ [Occ=Dead]
          { Unit# ipv_sJ79 ->
                case freshStateToken# [ipv_sJ79] of wild_sJ7A [OS=OneShot] {
                  __DEFAULT -> (#,#) [wild_sJ7A ipv_sJ79];
                };
          };
Control.Concurrent.Fiber.test :: GHC.Types.IO ()
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r srt:SRT:[r17 :-> Control.Concurrent.Fiber.test4] [eta_B1]
        Control.Concurrent.Fiber.test4 eta_B1;
Control.Concurrent.Fiber.test13 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "hello"#;
Control.Concurrent.Fiber.testReact_m1
  :: Control.Concurrent.Fiber.Fiber [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[r11 :-> Control.Concurrent.Fiber.test13,
                r1Z :-> Control.Concurrent.Fiber.$wreactOption] []
        case
            Control.Concurrent.Fiber.$wreactOption
                Control.Concurrent.Fiber.test13
        of
        _ [Occ=Dead]
        { Unit# ww1_sJ7C [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sJ7C];
        };
Control.Concurrent.Fiber.testReact4
  :: (Control.Concurrent.Fiber.Dyn
      -> GHC.Types.IO ([GHC.Types.Char] -> [GHC.Types.Char]))
     -> GHC.Types.IO ([GHC.Types.Char] -> [GHC.Types.Char])
[GblId, Arity=1, Str=, Unf=OtherCon []] =
    \r srt:SRT:[r5 :-> Control.Concurrent.Fiber.testReact_m1] [c_sJ7D]
        case Control.Concurrent.Fiber.testReact_m1 of _ [Occ=Dead] {
          Control.Concurrent.Fiber.Fiber ds_sJ7F [Occ=Once!] ->
              let {
                sat_sJ7I [Occ=Once]
                  :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO [GHC.Types.Char]
                [LclId, Str=] =
                    \r srt:SRT:[] [x_sJ7G]
                        let {
                          sat_sJ7H [Occ=Once] :: Control.Concurrent.Fiber.Dyn
                          [LclId, Str=] =
                              \u srt:SRT:[] [] GHC.Base.++ x_sJ7G;
                        } in  c_sJ7D sat_sJ7H;
              } in  ds_sJ7F sat_sJ7I;
        };
Control.Concurrent.Fiber.testReact3
  :: Control.Concurrent.Fiber.Fiber
       ([GHC.Types.Char] -> [GHC.Types.Char])
[GblId, Str=, Unf=OtherCon []] =
    NO_CCS Control.Concurrent.Fiber.Fiber! [Control.Concurrent.Fiber.testReact4];
Control.Concurrent.Fiber.test11 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "world"#;
Control.Concurrent.Fiber.testReact2
  :: Control.Concurrent.Fiber.Fiber [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[r14 :-> Control.Concurrent.Fiber.test11,
                r1Z :-> Control.Concurrent.Fiber.$wreactOption] []
        case
            Control.Concurrent.Fiber.$wreactOption
                Control.Concurrent.Fiber.test11
        of
        _ [Occ=Dead]
        { Unit# ww1_sJ7K [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sJ7K];
        };
Control.Concurrent.Fiber.testReact_m
  :: Control.Concurrent.Fiber.Fiber GHC.Base.String
[GblId, Str=] =
    \u srt:SRT:[r7 :-> Control.Concurrent.Fiber.testReact3,
                r8 :-> Control.Concurrent.Fiber.testReact2,
                r3P :-> Control.Concurrent.Fiber.$w$c<*>] []
        case
            Control.Concurrent.Fiber.$w$c<*>
                Control.Concurrent.Fiber.testReact3
                Control.Concurrent.Fiber.testReact2
        of
        _ [Occ=Dead]
        { Unit# ww1_sJ7M [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sJ7M];
        };
Control.Concurrent.Fiber.testReact5
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=, Unf=OtherCon []] =
    \r srt:SRT:[r19 :-> Control.Concurrent.Fiber.reactLoop1] [s_sJ7N]
        let {
          sat_sJ7P [Occ=Once] :: GHC.Prim.Any
          [LclId, Str=] =
              \u srt:SRT:[r19 :-> Control.Concurrent.Fiber.reactLoop1] []
                  Control.Concurrent.Fiber.reactLoop1 s_sJ7N;
        } in 
          case
              __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ7P]
          of
          _ [Occ=Dead]
          { Unit# ipv_sJ7R ->
                case freshStateToken# [ipv_sJ7R] of wild_sJ7S [OS=OneShot] {
                  __DEFAULT -> (#,#) [wild_sJ7S ipv_sJ7R];
                };
          };
Control.Concurrent.Fiber.testReact1
  :: forall b_a77H.
     (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_a77H)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           Control.Concurrent.Fiber.FiberId #)
[GblId, Arity=2, Str=<L,C(C1(U))><S,U>, Unf=OtherCon []] =
    \r srt:SRT:[rA :-> Control.Concurrent.Fiber.testReact_m,
                rB :-> Control.Concurrent.Fiber.testReact5,
                rQ :-> GHC.Show.$fShow_[]_$s$cshow1,
                rY :-> GHC.IO.Handle.FD.stdout, rZ :-> GHC.IO.Handle.Text.hPutStr2,
                r68 :-> Control.Concurrent.Fiber.no] [c_sJ7T s_sJ7U]
        case
            fork# [Control.Concurrent.Fiber.testReact5 s_sJ7U]
        of
        _ [Occ=Dead]
        { (#,#) ipv_sJ7W [Occ=Once] _ [Occ=Dead] ->
              case Control.Concurrent.Fiber.testReact_m of _ [Occ=Dead] {
                Control.Concurrent.Fiber.Fiber ds1_sJ7Z [Occ=Once!] ->
                    let {
                      sat_sJ8B [Occ=Once]
                        :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO GHC.Base.String
                      [LclId, Str=] =
                          \r srt:SRT:[rQ :-> GHC.Show.$fShow_[]_$s$cshow1,
                                      rY :-> GHC.IO.Handle.FD.stdout,
                                      rZ :-> GHC.IO.Handle.Text.hPutStr2,
                                      r68 :-> Control.Concurrent.Fiber.no] [x_sJ80 eta_sJ81]
                              let {
                                sat_sJ82 [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
                                [LclId, Str=] =
                                    \s srt:SRT:[rQ :-> GHC.Show.$fShow_[]_$s$cshow1] []
                                        GHC.Show.$fShow_[]_$s$cshow1 x_sJ80;
                              } in 
                                case
                                    GHC.IO.Handle.Text.hPutStr2
                                        GHC.IO.Handle.FD.stdout sat_sJ82 GHC.Types.True eta_sJ81
                                of
                                _ [Occ=Dead]
                                { (#,#) ipv2_sJ84 [Occ=Once] _ [Occ=Dead] ->
                                      case Control.Concurrent.Fiber.no of _ [Occ=Dead] {
                                        GHC.MVar.MVar mvar#_sJ87 [Occ=Once] ->
                                            case takeMVar# [mvar#_sJ87 ipv2_sJ84] of _ [Occ=Dead] {
                                              (#,#) ipv4_sJ89 [Occ=Once] ipv5_sJ8A [Occ=Once] ->
                                                  c_sJ7T ipv5_sJ8A ipv4_sJ89;
                                            };
                                      };
                                };
                    } in  ds1_sJ7Z sat_sJ8B ipv_sJ7W;
              };
        };
Control.Concurrent.Fiber.testReact
  :: forall b_a77F. Control.Concurrent.Fiber.Fiber b_a77F
[GblId, Str=m, Unf=OtherCon []] =
    NO_CCS Control.Concurrent.Fiber.Fiber! [Control.Concurrent.Fiber.testReact1];
Control.Concurrent.Fiber.$wpoly_f [InlPrag=[0], Occ=LoopBreaker]
  :: forall b_X7CQ.
     [GHC.Types.Char]
     -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_X7CQ)
           -> GHC.Types.IO b_X7CQ #)
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    \r srt:SRT:[rY :-> GHC.IO.Handle.FD.stdout,
                rZ :-> GHC.IO.Handle.Text.hPutStr2,
                r20 :-> Control.Concurrent.Fiber.$wpoly_f,
                r4P :-> GHC.Show.showLitString] [w_sJ8C]
        let {
          k_sJ8D [Dmd=<L,U(C(C(U)))>]
            :: Control.Concurrent.Fiber.Fiber b_X7CQ
          [LclId, Str=] =
              \u srt:SRT:[r20 :-> Control.Concurrent.Fiber.$wpoly_f] []
                  case Control.Concurrent.Fiber.$wpoly_f w_sJ8C of _ [Occ=Dead] {
                    Unit# ww1_sJ8F [Occ=Once] ->
                        Control.Concurrent.Fiber.Fiber [ww1_sJ8F];
                  }; } in
        let {
          a2_sJ8G :: GHC.Base.String
          [LclId, Str=] =
              \u srt:SRT:[r4P :-> GHC.Show.showLitString] []
                  let {
                    sat_sJ8H [Occ=Once] :: GHC.Base.String
                    [LclId, Str=] =
                        NO_CCS :! [GHC.Show.shows7 GHC.Types.[]];
                  } in  GHC.Show.showLitString w_sJ8C sat_sJ8H; } in
        let {
          lvl1_sJ8I [Occ=OnceL] :: GHC.Base.String
          [LclId, Str=, Unf=OtherCon []] =
              NO_CCS :! [GHC.Show.shows7 a2_sJ8G];
        } in 
          let {
            sat_sJ91 [Occ=Once]
              :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO b_X7CQ)
                 -> GHC.Types.IO b_X7CQ
            [LclId, Str=] =
                \r srt:SRT:[rY :-> GHC.IO.Handle.FD.stdout,
                            rZ :-> GHC.IO.Handle.Text.hPutStr2] [c_sJ8J s_sJ8K]
                    case
                        GHC.IO.Handle.Text.hPutStr2
                            GHC.IO.Handle.FD.stdout lvl1_sJ8I GHC.Types.True s_sJ8K
                    of
                    _ [Occ=Dead]
                    { (#,#) ipv_sJ8M [Occ=Once] _ [Occ=Dead] ->
                          let {
                            sat_sJ8X [Occ=Once] :: GHC.Prim.Any
                            [LclId, Str=] =
                                \r srt:SRT:[] [s1_sJ8P]
                                    let {
                                      sat_sJ8T [Occ=Once] :: GHC.Prim.Any
                                      [LclId, Str=] =
                                          \u srt:SRT:[] []
                                              case k_sJ8D of _ [Occ=Dead] {
                                                Control.Concurrent.Fiber.Fiber ds_sJ8S [Occ=Once!] ->
                                                    ds_sJ8S c_sJ8J s1_sJ8P;
                                              };
                                    } in 
                                      case
                                          __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ8T]
                                      of
                                      _ [Occ=Dead]
                                      { Unit# ipv2_sJ8V ->
                                            case
                                                freshStateToken# [ipv2_sJ8V]
                                            of
                                            wild_sJ8W [OS=OneShot]
                                            { __DEFAULT -> (#,#) [wild_sJ8W ipv2_sJ8V];
                                            };
                                      };
                          } in 
                            case
                                __primcall  eta.fibers.PrimOps.yieldFiber [0 sat_sJ8X ipv_sJ8M]
                            of
                            s'_sJ8Y [OS=OneShot]
                            { __DEFAULT ->
                                  case k_sJ8D of _ [Occ=Dead] {
                                    Control.Concurrent.Fiber.Fiber ds_sJ90 [Occ=Once!] ->
                                        ds_sJ90 c_sJ8J s'_sJ8Y;
                                  };
                            };
                    };
          } in  Unit# [sat_sJ91];
Control.Concurrent.Fiber.test9 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "world2"#;
Control.Concurrent.Fiber.test8
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=, Unf=OtherCon []] =
    \r srt:SRT:[rD :-> Control.Concurrent.Fiber.test9,
                r20 :-> Control.Concurrent.Fiber.$wpoly_f] [s_sJ92]
        let {
          sat_sJ96 [Occ=Once] :: GHC.Prim.Any
          [LclId, Str=] =
              \u srt:SRT:[rD :-> Control.Concurrent.Fiber.test9,
                          r20 :-> Control.Concurrent.Fiber.$wpoly_f] []
                  case
                      Control.Concurrent.Fiber.$wpoly_f Control.Concurrent.Fiber.test9
                  of
                  _ [Occ=Dead]
                  { Unit# ww1_sJ95 [Occ=Once!] ->
                        ww1_sJ95 Control.Concurrent.Fiber.unFiber1 s_sJ92;
                  };
        } in 
          case
              __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ96]
          of
          _ [Occ=Dead]
          { Unit# ipv_sJ98 ->
                case freshStateToken# [ipv_sJ98] of wild_sJ99 [OS=OneShot] {
                  __DEFAULT -> (#,#) [wild_sJ99 ipv_sJ98];
                };
          };
Control.Concurrent.Fiber.test10
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=, Unf=OtherCon []] =
    \r srt:SRT:[r14 :-> Control.Concurrent.Fiber.test11,
                r20 :-> Control.Concurrent.Fiber.$wpoly_f] [s_sJ9A]
        let {
          sat_sJ9E [Occ=Once] :: GHC.Prim.Any
          [LclId, Str=] =
              \u srt:SRT:[r14 :-> Control.Concurrent.Fiber.test11,
                          r20 :-> Control.Concurrent.Fiber.$wpoly_f] []
                  case
                      Control.Concurrent.Fiber.$wpoly_f Control.Concurrent.Fiber.test11
                  of
                  _ [Occ=Dead]
                  { Unit# ww1_sJ9D [Occ=Once!] ->
                        ww1_sJ9D Control.Concurrent.Fiber.unFiber1 s_sJ9A;
                  };
        } in 
          case
              __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ9E]
          of
          _ [Occ=Dead]
          { Unit# ipv_sJ9G ->
                case freshStateToken# [ipv_sJ9G] of wild_sJ9H [OS=OneShot] {
                  __DEFAULT -> (#,#) [wild_sJ9H ipv_sJ9G];
                };
          };
Control.Concurrent.Fiber.test12
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=, Unf=OtherCon []] =
    \r srt:SRT:[r11 :-> Control.Concurrent.Fiber.test13,
                r20 :-> Control.Concurrent.Fiber.$wpoly_f] [s_sJ9I]
        let {
          sat_sJ9M [Occ=Once] :: GHC.Prim.Any
          [LclId, Str=] =
              \u srt:SRT:[r11 :-> Control.Concurrent.Fiber.test13,
                          r20 :-> Control.Concurrent.Fiber.$wpoly_f] []
                  case
                      Control.Concurrent.Fiber.$wpoly_f Control.Concurrent.Fiber.test13
                  of
                  _ [Occ=Dead]
                  { Unit# ww1_sJ9L [Occ=Once!] ->
                        ww1_sJ9L Control.Concurrent.Fiber.unFiber1 s_sJ9I;
                  };
        } in 
          case
              __primcall  eta.runtime.stg.Stg.trampoline [sat_sJ9M]
          of
          _ [Occ=Dead]
          { Unit# ipv_sJ9O ->
                case freshStateToken# [ipv_sJ9O] of wild_sJ9P [OS=OneShot] {
                  __DEFAULT -> (#,#) [wild_sJ9P ipv_sJ9O];
                };
          };
Control.Concurrent.Fiber.test7
  :: forall b_a7EU.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b_a7EU #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    \r srt:SRT:[rE :-> Control.Concurrent.Fiber.test8,
                rF :-> GHC.Conc.Sync.$wa1, r12 :-> Control.Concurrent.Fiber.test12,
                r15 :-> Control.Concurrent.Fiber.test10,
                r68 :-> Control.Concurrent.Fiber.no] [s_sJ9Q]
        case GHC.Conc.Sync.$wa1 1 s_sJ9Q of _ [Occ=Dead] {
          (#,#) ipv_sJ9S [Occ=Once] _ [Occ=Dead] ->
              case
                  fork# [Control.Concurrent.Fiber.test12 ipv_sJ9S]
              of
              _ [Occ=Dead]
              { (#,#) ipv2_sJ9V [Occ=Once] _ [Occ=Dead] ->
                    case
                        fork# [Control.Concurrent.Fiber.test10 ipv2_sJ9V]
                    of
                    _ [Occ=Dead]
                    { (#,#) ipv4_sJ9Y [Occ=Once] _ [Occ=Dead] ->
                          case
                              fork# [Control.Concurrent.Fiber.test8 ipv4_sJ9Y]
                          of
                          _ [Occ=Dead]
                          { (#,#) ipv6_sJA1 [Occ=Once] _ [Occ=Dead] ->
                                GHC.MVar.takeMVar1 Control.Concurrent.Fiber.no ipv6_sJA1;
                          };
                    };
              };
        };
Control.Concurrent.Fiber.test1
  :: forall b_a7ES. GHC.Types.IO b_a7ES
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    \r srt:SRT:[r16 :-> Control.Concurrent.Fiber.test7] [eta_B1]
        Control.Concurrent.Fiber.test7 eta_B1;
Control.Concurrent.Fiber.test25 :: [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[] [] GHC.CString.unpackCString# "hello "#;
Control.Concurrent.Fiber.test24
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
[GblId, Arity=1, Str=, Unf=OtherCon []] =
    \r srt:SRT:[rJ :-> Control.Concurrent.Fiber.test25] [s_sJA3]
        (#,#) [s_sJA3 Control.Concurrent.Fiber.test25];
Control.Concurrent.Fiber.test3_m1
  :: Control.Concurrent.Fiber.Fiber [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[rK :-> Control.Concurrent.Fiber.test24,
                r23 :-> Control.Concurrent.Fiber.$wasync] []
        case
            Control.Concurrent.Fiber.$wasync Control.Concurrent.Fiber.test24
        of
        _ [Occ=Dead]
        { Unit# ww1_sJA5 [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sJA5];
        };
Control.Concurrent.Fiber.test23
  :: (Control.Concurrent.Fiber.Dyn
      -> GHC.Types.IO ([GHC.Types.Char] -> [GHC.Types.Char]))
     -> GHC.Types.IO ([GHC.Types.Char] -> [GHC.Types.Char])
[GblId, Arity=1, Str=, Unf=OtherCon []] =
    \r srt:SRT:[rL :-> Control.Concurrent.Fiber.test3_m1] [c_sJA6]
        case Control.Concurrent.Fiber.test3_m1 of _ [Occ=Dead] {
          Control.Concurrent.Fiber.Fiber ds_sJA8 [Occ=Once!] ->
              let {
                sat_sJAB [Occ=Once]
                  :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO [GHC.Types.Char]
                [LclId, Str=] =
                    \r srt:SRT:[] [x_sJA9]
                        let {
                          sat_sJAA [Occ=Once] :: Control.Concurrent.Fiber.Dyn
                          [LclId, Str=] =
                              \u srt:SRT:[] [] GHC.Base.++ x_sJA9;
                        } in  c_sJA6 sat_sJAA;
              } in  ds_sJA8 sat_sJAB;
        };
Control.Concurrent.Fiber.test22
  :: Control.Concurrent.Fiber.Fiber
       ([GHC.Types.Char] -> [GHC.Types.Char])
[GblId, Str=, Unf=OtherCon []] =
    NO_CCS Control.Concurrent.Fiber.Fiber! [Control.Concurrent.Fiber.test23];
Control.Concurrent.Fiber.test21
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Char] #)
[GblId, Arity=1, Str=, Unf=OtherCon []] =
    \r srt:SRT:[r14 :-> Control.Concurrent.Fiber.test11] [s_sJAC]
        (#,#) [s_sJAC Control.Concurrent.Fiber.test11];
Control.Concurrent.Fiber.test20
  :: Control.Concurrent.Fiber.Fiber [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[rO :-> Control.Concurrent.Fiber.test21,
                r23 :-> Control.Concurrent.Fiber.$wasync] []
        case
            Control.Concurrent.Fiber.$wasync Control.Concurrent.Fiber.test21
        of
        _ [Occ=Dead]
        { Unit# ww1_sJAE [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sJAE];
        };
Control.Concurrent.Fiber.test3_m
  :: Control.Concurrent.Fiber.Fiber [GHC.Types.Char]
[GblId, Str=] =
    \u srt:SRT:[rN :-> Control.Concurrent.Fiber.test22,
                rP :-> Control.Concurrent.Fiber.test20,
                r3P :-> Control.Concurrent.Fiber.$w$c<*>] []
        case
            Control.Concurrent.Fiber.$w$c<*>
                Control.Concurrent.Fiber.test22 Control.Concurrent.Fiber.test20
        of
        _ [Occ=Dead]
        { Unit# ww1_sJAG [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sJAG];
        };
Control.Concurrent.Fiber.test19
  :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO ())
     -> GHC.Types.IO ()
[GblId, Arity=1, Str=<L,C(C1(U))>, Unf=OtherCon []] =
    \r srt:SRT:[rQ :-> GHC.Show.$fShow_[]_$s$cshow1,
                rR :-> Control.Concurrent.Fiber.test3_m,
                rY :-> GHC.IO.Handle.FD.stdout,
                rZ :-> GHC.IO.Handle.Text.hPutStr2] [c_sJAH]
        case Control.Concurrent.Fiber.test3_m of _ [Occ=Dead] {
          Control.Concurrent.Fiber.Fiber ds_sJAJ [Occ=Once!] ->
              let {
                sat_sJAQ [Occ=Once]
                  :: Control.Concurrent.Fiber.Dyn -> GHC.Types.IO [GHC.Types.Char]
                [LclId, Str=] =
                    \r srt:SRT:[rQ :-> GHC.Show.$fShow_[]_$s$cshow1,
                                rY :-> GHC.IO.Handle.FD.stdout,
                                rZ :-> GHC.IO.Handle.Text.hPutStr2] [x_sJAK eta_sJAL]
                        let {
                          sat_sJAM [Occ=Once, Dmd=<L,1*U>] :: GHC.Base.String
                          [LclId, Str=] =
                              \s srt:SRT:[rQ :-> GHC.Show.$fShow_[]_$s$cshow1] []
                                  GHC.Show.$fShow_[]_$s$cshow1 x_sJAK;
                        } in 
                          case
                              GHC.IO.Handle.Text.hPutStr2
                                  GHC.IO.Handle.FD.stdout sat_sJAM GHC.Types.True eta_sJAL
                          of
                          _ [Occ=Dead]
                          { (#,#) ipv_sJAO [Occ=Once] ipv1_sJAP [Occ=Once] ->
                                c_sJAH ipv1_sJAP ipv_sJAO;
                          };
              } in  ds_sJAJ sat_sJAQ;
        };
Control.Concurrent.Fiber.test18
  :: Control.Concurrent.Fiber.Fiber ()
[GblId, Str=m, Unf=OtherCon []] =
    NO_CCS Control.Concurrent.Fiber.Fiber! [Control.Concurrent.Fiber.test19];
Control.Concurrent.Fiber.test17
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=1, Str=, Unf=OtherCon []] =
    \r srt:SRT:[rT :-> Control.Concurrent.Fiber.test18,
                r1K :-> Control.Concurrent.Fiber.keep1] [eta_B1]
        Control.Concurrent.Fiber.keep1
            Control.Concurrent.Fiber.test18 eta_B1;
Control.Concurrent.Fiber.test3 :: GHC.Types.IO ()
[GblId, Arity=1, Str=, Unf=OtherCon []] =
    \r srt:SRT:[rU :-> Control.Concurrent.Fiber.test17] [eta_B1]
        Control.Concurrent.Fiber.test17 eta_B1;
Control.Concurrent.Fiber.waitEvents1
  :: Control.Concurrent.Fiber.Dyn
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,A><S,U>, Unf=OtherCon []] =
    \r srt:SRT:[] [x_sJAR s_sJAS] (#,#) [s_sJAS GHC.Tuple.()];
Control.Concurrent.Fiber.$wwaitEvents [InlPrag=[0]]
  :: forall a_a3PZ.
     GHC.Types.IO a_a3PZ
     -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a_a3PZ)
           -> GHC.Types.IO a_a3PZ #)
[GblId, Arity=1, Str=<L,C(U(U,U))>, Unf=OtherCon []] =
    \r srt:SRT:[r3U :-> Control.Concurrent.Fiber.$fAlternative_Fiber8] [w_sJAT]
        let {
          $wloop_sJAU [InlPrag=[0], Occ=LoopBreaker]
            :: forall a3_a750 a4_a751.
               (a2_a3PZ -> Control.Concurrent.Fiber.Fiber a4_a751)
               -> (# (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a3_a750)
                     -> GHC.Types.IO a3_a750 #)
          [LclId, Arity=1, Str=<L,C(U(1*C1(C1(U))))>, Unf=OtherCon []] =
              sat-only \r srt:SRT:[r3U :-> Control.Concurrent.Fiber.$fAlternative_Fiber8] [w1_sJAV]
                  let {
                    lvl1_sJAW [Occ=OnceL]
                      :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                    [LclId, Arity=1, Str=, Unf=OtherCon []] =
                        \r srt:SRT:[] [s_sJAX]
                            let {
                              sat_sJBB [Occ=Once] :: GHC.Prim.Any
                              [LclId, Str=] =
                                  \u srt:SRT:[] []
                                      case w_sJAT s_sJAX of _ [Occ=Dead] {
                                        (#,#) ipv_sJB0 [Occ=Once] ipv1_sJB1 [Occ=Once] ->
                                            case w1_sJAV ipv1_sJB1 of _ [Occ=Dead] {
                                              Control.Concurrent.Fiber.Fiber ds_sJB3 [Occ=Once!] ->
                                                  let {
                                                    k_sJB4 [Occ=OnceL!, Dmd=<L,U(C(U))>]
                                                      :: Control.Concurrent.Fiber.Fiber a3_a750
                                                    [LclId, Str=] =
                                                        \u srt:SRT:[] []
                                                            case
                                                                $wloop_sJAU w1_sJAV
                                                            of
                                                            _ [Occ=Dead]
                                                            { Unit# ww1_sJB6 [Occ=Once] ->
                                                                  Control.Concurrent.Fiber.Fiber [ww1_sJB6];
                                                            };
                                                  } in 
                                                    let {
                                                      sat_sJBA [Occ=Once]
                                                        :: Control.Concurrent.Fiber.Dyn
                                                           -> GHC.Types.IO a4_a751
                                                      [LclId, Str=] =
                                                          \r srt:SRT:[] [x_sJB7]
                                                              case k_sJB4 of _ [Occ=Dead] {
                                                                Control.Concurrent.Fiber.Fiber ds2_sJB9 [Occ=Once!] ->
                                                                    ds2_sJB9
                                                                        Control.Concurrent.Fiber.waitEvents1;
                                                              };
                                                    } in  ds_sJB3 sat_sJBA ipv_sJB0;
                                            };
                                      };
                            } in 
                              case
                                  __primcall  eta.runtime.stg.Stg.trampoline [sat_sJBB]
                              of
                              _ [Occ=Dead]
                              { Unit# ipv_sJBD ->
                                    case freshStateToken# [ipv_sJBD] of wild_sJBE [OS=OneShot] {
                                      __DEFAULT -> (#,#) [wild_sJBE ipv_sJBD];
                                    };
                              };
                  } in 
                    let {
                      sat_sJBL [Occ=Once]
                        :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a3_a750)
                           -> GHC.Types.IO a3_a750
                      [LclId, Str=] =
                          \r srt:SRT:[r3U :-> Control.Concurrent.Fiber.$fAlternative_Fiber8] [c_sJBF
                                                                                              eta_sJBG]
                              case fork# [lvl1_sJAW eta_sJBG] of _ [Occ=Dead] {
                                (#,#) _ [Occ=Dead] _ [Occ=Dead] ->
                                    Control.Concurrent.Fiber.$fAlternative_Fiber8;
                              };
                    } in  Unit# [sat_sJBL];
        } in 
          let {
            sat_sJBU [Occ=Once]
              :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a2_a3PZ)
                 -> GHC.Types.IO a2_a3PZ
            [LclId, Str=] =
                \r srt:SRT:[] [c_sJBM]
                    let {
                      sat_sJBR [Occ=Once]
                        :: a2_a3PZ -> Control.Concurrent.Fiber.Fiber GHC.Prim.Any
                      [LclId, Str=] =
                          \r srt:SRT:[] [x_sJBN]
                              let {
                                a3_sJBO [Occ=OnceL, Dmd=<L,C(U)>] :: GHC.Types.IO a2_a3PZ
                                [LclId, Str=] =
                                    \u srt:SRT:[] [] c_sJBM x_sJBN;
                              } in 
                                let {
                                  sat_sJBQ [Occ=Once]
                                    :: (Control.Concurrent.Fiber.Dyn -> GHC.Types.IO GHC.Prim.Any)
                                       -> GHC.Types.IO GHC.Prim.Any
                                  [LclId, Str=] =
                                      \r srt:SRT:[] [ds_sJBP] a3_sJBO;
                                } in  Control.Concurrent.Fiber.Fiber [sat_sJBQ];
                    } in 
                      case $wloop_sJAU sat_sJBR of _ [Occ=Dead] {
                        Unit# ww1_sJBT [Occ=Once!] -> ww1_sJBT c_sJBM;
                      };
          } in  Unit# [sat_sJBU];
Control.Concurrent.Fiber.waitEvents [InlPrag=INLINE[0]]
  :: forall a_a3PZ.
     GHC.Types.IO a_a3PZ -> Control.Concurrent.Fiber.Fiber a_a3PZ
[GblId, Arity=1, Str=<L,C(U(U,U))>m, Unf=OtherCon []] =
    \r srt:SRT:[r1U :-> Control.Concurrent.Fiber.$wwaitEvents] [w_sJBV]
        case Control.Concurrent.Fiber.$wwaitEvents w_sJBV of _ [Occ=Dead] {
          Unit# ww1_sJBX [Occ=Once] ->
              Control.Concurrent.Fiber.Fiber [ww1_sJBX];
        };
Control.Concurrent.Fiber.FiberId
  :: GHC.Prim.ThreadId# -> Control.Concurrent.Fiber.FiberId
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B1] Control.Concurrent.Fiber.FiberId [eta_B1];
Control.Concurrent.Fiber.Fiber
  :: forall a_a3OT.
     ((Control.Concurrent.Fiber.Dyn -> GHC.Types.IO a_a3OT)
      -> GHC.Types.IO a_a3OT)
     -> Control.Concurrent.Fiber.Fiber a_a3OT
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B1] Control.Concurrent.Fiber.Fiber [eta_B1];
Control.Concurrent.Fiber.Empty :: Control.Concurrent.Fiber.Empty
[GblId[DataCon], Caf=NoCafRefs, Str=, Unf=OtherCon []] =
    NO_CCS Control.Concurrent.Fiber.Empty! [];
Control.Concurrent.Fiber.D:AdditionalOperators
  :: forall (m_a3JF :: * -> *).
     (forall a_a3JG[sk] b_a3JH[sk].
      m_a3JF a_a3JG[sk] -> m_a3JF b_a3JH[sk] -> m_a3JF b_a3JH[sk])
     -> (forall a_a3JI[sk] b_a3JJ[sk].
         m_a3JF a_a3JI[sk] -> m_a3JF b_a3JJ[sk] -> m_a3JF a_a3JI[sk])
     -> (forall a_a3JK[sk] b_a3JL[sk].
         m_a3JF a_a3JK[sk] -> m_a3JF b_a3JL[sk] -> m_a3JF a_a3JK[sk])
     -> (forall a_a3JM[sk] b_a3JN[sk].
         m_a3JF a_a3JM[sk] -> m_a3JF b_a3JN[sk] -> m_a3JF a_a3JM[sk])
     -> (forall a_a3JO[sk] b_a3JP[sk].
         m_a3JF a_a3JO[sk] -> m_a3JF b_a3JP[sk] -> m_a3JF a_a3JO[sk])
     -> Control.Concurrent.Fiber.AdditionalOperators m_a3JF
[GblId[DataCon],
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    \r srt:SRT:[] [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        Control.Concurrent.Fiber.D:AdditionalOperators [eta_B5
                                                        eta_B4
                                                        eta_B3
                                                        eta_B2
                                                        eta_B1];

